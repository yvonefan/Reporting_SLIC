Help on erARS in module pyars.erars object:
class erARS(erARS7604)
 |  Method resolution order:
 |      erARS
 |      erARS7604
 |      erARS7603
 |      erARS75
 |      erARS71
 |      erARS70
 |      erARS63
 |      erARS60
 |      erARS51
 |      pyars.ars.ARS
 |      pyars.ars.ARS7604
 |      pyars.ars.ARS7603
 |      pyars.ars.ARS75
 |      pyars.ars.ARS71
 |      pyars.ars.ARS70
 |      pyars.ars.ARS63
 |      pyars.ars.ARS60
 |      pyars.ars.ARS51
 |      __builtin__.object
 |
 |  Methods inherited from erARS7603:
 |
 |  CommitTask(self, name)
 |      CommitTask: undocumented function
 |
 |      Input: (ARNameType) name
 |      Output: errnr
 |
 |  CreateActiveLink(self, name, order, schemaList, groupList, executeMask, controlField=None, focusField=None, enable=True, query=None, actionList=None, elseList=None, helpText=None, owner=None, changeDiary=None, objPropList=None, errorActlinkOptions=None, errorActlinkName=None, objectModificationLogLabel=None)
 |      ARCreateActiveLink creates a new active link.
 |
 |      ARCreateActiveLink creates a new active link with the indicated name on the specified
 |      server. The active link is added to the server immediately and returned to
 |      users who request information about active links.
 |      Input: name (ARNameType)
 |             order (c_uint)
 |             schemaList (ARWorkflowConnectStruct)
 |             groupList (ARInternalIdList)
 |             executeMask (c_uint)
 |             (optional) controlField (ARInternalId, default = None)
 |             (optional) focusField (ARInternalId, default = None)
 |             (optional) enable (c_uint, default = None)
 |             (optional) query (ARQualifierStruct, default = None)
 |             (optional) actionList (ARActiveLinkActionList, default = None)
 |             (optional) elseList (ARActiveLinkActionList, default = None)
 |             (optional) helpText (c_char_p, default = None)
 |             (optional) owner (ARAccessNameType, default = None)
 |             (optional) changeDiary (c_char_p, default = None)
 |             (optional) objPropList (ARPropList, default = None)
 |             (optional) errorActlinkOptions (Reserved for future use. Set to NULL.)
 |             (optional) errorActlinkName (Reserved for future use. Set to NULL.)
 |             (optional) objectModificationLogLabel (c_char_p, default = None)
 |      Output: errnr
 |
 |  CreateCharMenu(self, name, refreshCode, menuDefn, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      CreateCharMenu creates a new character menu with the indicated name.
 |      Input: name (ARNameType)
 |             refreshCode (c_uint)
 |             menuDef (ARCharMenuStruct)
 |             (optional) helpText (c_char_p, default = None)
 |             (optional) owner (ARAccessNameType, default = None)
 |             (optional) changeDiary (c_char_p, default = None)
 |             (optional) objPropList (ARPropList, default = None)
 |             (optional) objectModificationLogLabel (c_char_p, default = None)
 |      Output: errnr
 |
 |  CreateContainer(self, name, groupList, admingrpList, ownerObjList, label, description, type_, references, removeFlag, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      CreateContainer a new container with the indicated name.
 |
 |      Use this function to create
 |      applications, active links, active link guides, filter guide, packing lists, guides,
 |      and AR System-defined container types. A container can also be a custom type that you define.
 |      Input: name
 |             groupList
 |             admingrpList
 |             ownerObjList
 |             label
 |             description
 |             type_
 |             references
 |             removeFlag
 |             helpText
 |             owner
 |             changeDiary
 |             objPropList
 |             (optional) objectModificationLogLabel (c_char_p, default = None)
 |      Output: errnr
 |
 |  CreateEscalation(self, name, escalationTm, schemaList, enable, query=None, actionList=None, elseList=None, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      CreateEscalation creates a new escalation with the indicated name.
 |
 |      The escalation condition
 |      is checked regularly based on the time structure defined when it is enabled.
 |      Input: name (ARNameType)
 |             escalationTm (AREscalationTmStruct)
 |             schemaList (ARWorkflowConnectStruct)
 |             enable (c_uint)
 |             (optional) query (ARQualifierStruct, default = None)
 |             (optional) actionList (ARFilterActionList, default = None)
 |             (optional) elseList (ARFilterActionList, default = None)
 |             (optional) helpText (c_char_p, default = None)
 |             (optional) owner (ARAccessNameType, default = None)
 |             (optional) changeDiary (c_char_p, default = None)
 |             (optional) objPropList (ARPropList, default = None)
 |             (optional) objectModificationLogLabel (c_char_p, default = None)
 |      Output: errnr
 |
 |  CreateField(self, schema, fieldId, reservedIdOK, fieldName, fieldMap, dataType, option, createMode, fieldOption, defaultVal, permissions, limit=None, dInstanceList=None, helpText=None, owner=None, changeDiary=None, objPropList=None)
 |      CreateField creates a new field.
 |      Input: schema (ARNameType)
 |              fieldId (ARInternalId)
 |              reservedIdOK (ARBoolean)
 |              fieldName (ARNameType)
 |              fieldMap (ARFieldMappingStruct)
 |              dataType (c_uint)
 |              option (c_uint)
 |              createMode (c_uint)
 |              fieldOption (c_uint)
 |              defaultVal (ARValueStruct)
 |              permissions (ARPermissionList)
 |              (optional) limit (ARFieldLimitStruct, default = None)
 |              (optional) dInstanceList (ARDisplayInstanceList, default = None)
 |              (optional) helpText (c_char_p, default = None)
 |              (optional) owner (ARAccessNameType, default = None)
 |              (optional) changeDiary (c_char_p, default = None)
 |              (optional) objPropList (ARPropList, default = None)
 |      Output: fieldId (or None in case of failure)
 |
 |  CreateFilter(self, name, order, schemaList, opSet, enable, query, actionList, elseList=None, helpText=None, owner=None, changeDiary=None, objPropList=None, errorFilterOptions=0, errorFilterName=None, objectModificationLogLabel=None)
 |      CreateFilter creates a new filter.
 |
 |      CreateFilter creates a new filter with the indicated name on the specified
 |      server. The filter takes effect immediately and remains in effect until changed
 |      or deleted.
 |      Input: name,
 |             (unsigned int) order,
 |             (ARWorkflowConnectStruct) schemaList,
 |             (unsigned int) opSet,
 |             (unsigned int) enable,
 |             (ARQualifierStruct) query,
 |             (ARFilterActionList) actionList
 |             (ARFilterActionList) elseList  (optional, default = None)
 |             (char) helpText  (optional, default = None)
 |             (ARAccessNameType) owner  (optional, default = None)
 |             (char) changeDiary  (optional, default = None)
 |             (ARPropList) objPropList  (optional, default = None)
 |             (unsigned int) errorFilterOptions (optional, default = None)
 |             (ARNameType) errorFilterName (optional, default = None)
 |             (c_char) objectModificationLogLabel (optional, default = None)
 |      Output: errnr
 |
 |  CreateImage(self, name, imageBuf, imageType, description=None, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      CreateImage creates a new image with the indicated name on the specified server
 |      Input: name (ARNameType)
 |             imageBuf (ARImageDataStruct)
 |             imageType (c_char_p, Valid values are: BMP, GIF, JPEG or JPG, and PNG.)
 |             (optional) description (c_char_p, default: None)
 |             (optional) helpText (c_char_p, default: None)
 |             (optional) owner (ARAccessNameType, default: None)
 |             (optional) changeDiary (c_char_p, default: None)
 |             (optional) objPropList (ARPropList, default: None)
 |             (c_char) objectModificationLogLabel (optional, default = None)
 |      Output: errnr
 |
 |  CreateMultipleFields(self, schema, fieldIdList, reservedIdOKList, fieldNameList, fieldMapList, dataTypeList, optionList, createModeList, fieldOptionList, defaultValList, permissionListList, limitList=None, dInstanceListList=None, helpTextList=None, ownerList=None, changeDiaryList=None, objPropListList=None)
 |      CreateMultipleFields creates multiple fields in a form.
 |
 |      This function produces the same result as a
 |      sequence of ARCreateField calls to create the individual fields, but it can be more
 |      efficient. This function requires only one call from the client to the AR System
 |      server. The server can perform multiple database operations in a single transaction
 |      and avoid repeating operations such as those performed at the end of each
 |      individual call. If an error occurs creating an individual field, no fields are created.
 |      Input: ARNameType schema,
 |             (ARInternalIdList) fieldIdList,
 |             (ARBooleanList) reservedIdOKList
 |             (ARNamePtrList) fieldNameList,
 |             (ARFieldMappingList) fieldMapList,
 |             (ARUnsignedIntList) dataTypeList,
 |             (ARUnsignedIntList) optionList,
 |             (ARUnsignedIntList) createModeList,
 |             (ARUnsignedIntList) fieldOptionList,
 |             (ARValuePtrList) defaultValList,
 |             (ARPermissionListPtrList) permissionListList,
 |             (ARFieldLimitPtrList) limitList,
 |             (ARDisplayInstanceListPtrList) dInstanceListList,
 |             (ARTextStringList) helpTextList,
 |             (ARAccessNamePtrList) ownerList,
 |             (ARTextStringList) changeDiaryList
 |             (ARPropListList) objPropListList
 |      Output: errnr
 |
 |  CreateSchema(self, name, schema, schemaInheritanceList, groupList, admingrpList, getListFields, sortList, indexList, archiveInfo, auditInfo, defaultVui, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |
 |  CreateTask(self, name, chars=None, objProperties=None, versionControlList=None)
 |      CreateTask: undocumented function
 |
 |      Input: (ARNameType) name
 |             (c_char)  chars
 |             (ARPropList) objProperties
 |             (ARVercntlObjectList) versionControlList
 |      Output: errnr
 |
 |  CreateVUI(self, schema, vuiId, vuiName, locale, vuiType=None, dPropList=None, helpText=None, owner=None, changeDiary=None, smObjProp=None)
 |      CreateVUI reates a new form view (VUI) with the indicated name on
 |      the specified server.
 |      Input: schema
 |             vuiId (can be 0 or a value between 536870912 and 2147483647)
 |             vuiName
 |             locale
 |             optional: vuiType (default = None)
 |             optional: dPropList (default = None)
 |             optional: helpText (default = None)
 |             optional: owner (default = None)
 |             optional: changeDiary (default = None)
 |             optional: smObjProp (default = None)
 |      Output: vuiId (or None in case of failure)
 |
 |  DeleteActiveLink(self, name, deleteOption=0, objectModificationLogLabel=None)
 |      DeleteActiveLink deletes the active link.
 |
 |      DeleteActiveLink deletes the active link with the indicated name from the
 |      specified server and deletes any container references to the active link.
 |      Input: name
 |             (optional) deleteOption (default = cars.AR_DEFAULT_DELETE_OPTION)
 |             (optional) objectModificationLogLabel (c_char_p, default = None)
 |      Output: errnr
 |
 |  DeleteCharMenu(self, name, deleteOption=0, objectModificationLogLabel=None)
 |      DeleteCharMenu deletes the character menu with the indicated name from
 |      the specified server.
 |
 |      Input: name
 |             (optional) deleteOption (default = cars.AR_DEFAULT_DELETE_OPTION)
 |             (optional) objectModificationLogLabel (c_char_p, default = None)
 |      Output: errnr
 |
 |  DeleteContainer(self, name, deleteOption=0, objectModificationLogLabel=None)
 |      DeleteContainer deletes the container .
 |
 |      DeleteContainer deletes the container with the indicated name from
 |      the specified server and deletes any references to the container from other containers.
 |      Input: name
 |             (optional) deleteOption (default = cars.AR_DEFAULT_DELETE_OPTION)
 |             (optional) objectModificationLogLabel (default = None)
 |      Output: errnr
 |
 |  DeleteEscalation(self, name, deleteOption=0, objectModificationLogLabel=None)
 |      DeleteEscalation deletes the escalation.
 |
 |      DeleteEscalation deletes the escalation with the indicated name from the
 |      specified server and deletes any container references to the escalation.
 |      Input:  name
 |             (optional) deleteOption (default = cars.AR_DEFAULT_DELETE_OPTION)
 |             (optional) objectModificationLogLabel (c_char_p, default = None)
 |      Output: errnr
 |
 |  DeleteFilter(self, name, deleteOption=0, objectModificationLogLabel=None)
 |      DeleteFilter deletes the filter with the indicated name from the
 |      specified server and deletes any container references to the filter.
 |      Input:  name
 |             (optional) deleteOption (default = cars.AR_DEFAULT_DELETE_OPTION)
 |             (c_char_p) objectModificationLogLabel (optional, default = None)
 |      Output: errnr
 |
 |  DeleteImage(self, name, updateRef, objectModificationLogLabel=None)
 |      DeleteImage deletes the image with the indicated name from the specified server.
 |      Input: name (ARNameType)
 |             updateRef (ARBoolean, specify TRUE to remove all references to the image)
 |             (c_char_p) objectModificationLogLabel (optional, default = None)
 |      Output: errnr
 |
 |  DeleteSchema(self, name, deleteOption=0, objectModificationLogLabel=None)
 |      DeleteSchema deletes the form with the indicated name from the
 |      specified server and deletes any container references to the form.
 |
 |      Input: name
 |             deleteOption
 |             (c_char_p) objectModificationLogLabel (optional, default = None)
 |      Output: errnr
 |
 |  DeleteTask(self, name)
 |      DeleteTask: undocumented function
 |
 |      Input: (ARNameType) name
 |      Output: errnr
 |
 |  Export(self, structArray, displayTag=None, vuiType=0, exportOption=0, lockinfo=None)
 |      Export exports AR data structures to a string.
 |      Use this function to copy structure definitions from one AR System server to another.
 |      Note: Form exports do not work the same way with ARExport as they do in
 |      Remedy Administrator. Other than views, you cannot automatically
 |      export related items along with a form. You must explicitly specify the
 |      workflow items you want to export. Also, ARExport cannot export a form
 |      without embedding the server name in the export file (something you can
 |      do with the "Server-Independent" option in Remedy Administrator).
 |      Input: structArray ((cars.AR_STRUCT_ITEM_xxx, name), ...)
 |             displayTag (optional, default = None)
 |             vuiType (optional, default = cars.AR_VUI_TYPE_NONE
 |             (c_uint) exportOption (optional, default = cars.EXPORT_DEFAULT)
 |             (list) lockInfo: (optional, default = None) a list of (lockType, lockKey)
 |      Output: string (or None in case of failure)
 |
 |  ExportToFile(self, structItems, displayTag=None, vuiType=1, exportOption=0, lockinfo=None, filePtr=None)
 |      ExportToFile exports the indicated structure definitions
 |      from the specified server to a file. Use this function to copy structure
 |      definitions from one AR System server to another.
 |      Input: (tuple) structItems
 |             (ARNameType) displayTag (optional, default = None)
 |             (c_uint) vuiType  (optional, default = AR_VUI_TYPE_WINDOWS)
 |             (c_uint) exportOption (optional, default = cars.EXPORT_DEFAULT)
 |             (ARWorkflowLockStruct or tuple) lockinfo  (optional, default = None)
 |             (FILE) filePtr  (optional, default = None, resulting in an error)
 |      Output: errnr
 |
 |  GetMultipleActiveLinks(self, changedSince=0, nameList=None, orderListP=True, schemaListP=True, assignedGroupListListP=True, groupListListP=True, executeMaskListP=True, controlFieldListP=True, focusFieldListP=True, enableListP=True, queryListP=True, actionListListP=True, elseListListP=True, helpTextListP=True, timestampListP=True, ownersListP=True, lastChangedListP=True, changeDiaryListP=True, objPropListListP=True, errorActlinkOptionsListP=True, errorActlinkNameListP=True)
 |      GetMultipleActiveLinks
 |      Input: changedSince=0,
 |              nameList=None,
 |              (optional) orderListP = True,
 |              (optional) schemaListP = True,
 |              (optional) assignedGroupListListP = True,
 |              (optional) groupListListP = True,
 |              (optional) executeMaskListP = True,
 |              (optional) controlFieldListP = True,
 |              (optional) focusFieldListP = True,
 |              (optional) enableListP = True,
 |              (optional) queryListP = True,
 |              (optional) actionListListP = True,
 |              (optional) elseListListP = True,
 |              (optional) helpTextListP = True,
 |              (optional) timestampListP = True,
 |              (optional) ownersListP = True,
 |              (optional) lastChangedListP = True,
 |              (optional) changeDiaryListP = True,
 |              (optional) objPropListListP = True,
 |              (optional) errorActlinkOptionsListP = True
 |              (optional) errorActlinkNameListP = True
 |      Output: ARActiveLinkList
 |
 |  GetMultipleFields(self, schemaString, idList=None, fieldId2P=True, fieldNameP=True, fieldMapP=False, dataTypeP=False, optionP=False, createModeP=False, fieldOptionP=False, defaultValP=False, assignedGroupListListP=False, permissionsP=False, limitP=False, dInstanceListP=False, helpTextP=False, timestampP=False, ownerP=False, lastChangedP=False, changeDiaryP=False, objPropListListP=False)
 |      GetMultipleFields returns a list of the fields and their attributes.
 |
 |      GetMultipleFields returns list of field definitions for a specified form.
 |      In contrast to the C APi this function constructs an ARFieldInfoList
 |      for the form and returns all information this way.
 |      Input:  schemaString
 |              (optional) idList (ARInternalIdList; default: None) we currently
 |                        expect a real ARInternalIdList, because then it's very
 |                        easy to simply hand over the result of a GetListField
 |                        call
 |            (optional) fieldId2P and all others (Boolean) set to False (default,
 |                         only fieldNameP is set to True)
 |                        if you are not interested in those values, to True
 |                        otherwise (the aprameters have names with 'P' appended
 |                        as in Predicate)
 |      Output: ARFieldInfoList
 |
 |  GetMultipleSchemas(self, changedSince=0, schemaTypeList=None, nameList=None, fieldIdList=None, schemaListP=True, schemaInheritanceListListP=False, assignedGroupListListP=False, groupListListP=False, admingrpListListP=False, getListFieldsListP=False, sortListListP=False, indexListListP=False, archiveInfoListP=False, auditInfoListP=False, defaultVuiListP=False, helpTextListP=False, timestampListP=False, ownerListP=False, lastChangedListP=False, changeDiaryListP=False, objPropListListP=False)
 |      GetMultipleSchemas
 |
 |      Input:  changedSince
 |              schemaTypeList
 |              nameList
 |              fieldIdList
 |              archiveInfoList
 |
 |      Output: ARSchemaList
 |
 |  Import(self, structArray, importBuf, importOption=0, objectModificationLogLabel=None)
 |      Import
 |
 |      Input:  structItems
 |              importBuf
 |              optional: importOption (Default=cars.AR_IMPORT_OPT_CREATE)
 |              (optional) objectModificationLogLabel (c_char_p, default = None)
 |      Output: errnr
 |
 |  RollbackTask(self, name)
 |      RollbackTask: undocumented function
 |
 |      Input: (ARNameType) name
 |      Output: errnr
 |
 |  SetActiveLink(self, name, newName=None, order=None, workflowConnect=None, groupList=None, executeMask=None, controlField=None, focusField=None, enable=None, query=None, actionList=None, elseList=None, helpText=None, owner=None, changeDiary=None, objPropList=None, errorActlinkOptions=None, errorActlinkName=None, objectModificationLogLabel=None)
 |      SetActiveLink updates the active link.
 |
 |      The changes are added to the server immediately and returned to users who
 |      request information about active links. Because active links operate on
 |      clients, individual clients do not receive the updated definition until they
 |      reconnect to the form (thus reloading the form from the server).
 |      Input:  name (ARNameType),
 |              (optional) newName (ARNameType, default = None)
 |              (optional) order (c_uint, default = None)
 |              (optional) workflowConnect (ARWorkflowConnectStruct, default = None)
 |              (optional) groupList (ARInternalIdList, default = None)
 |              (optional) executeMask (c_uint, default = None)
 |              (optional) controlField (ARInternalId, default = None)
 |              (optional) focusField (ARInternalId, default = None)
 |              (optional) enable (c_uint, default = None)
 |              (optional) query (ARQualifierStruct, default = None)
 |              (optional) actionList (ARActiveLinkActionList, default = None)
 |              (optional) elseList (ARActiveLinkActionList, default = None)
 |              (optional) helpText (c_char_p, default = None)
 |              (optional) ARAccessNameType (ARNameType, default = None)
 |              (optional) changeDiary (c_char_p, default = None)
 |              (optional) objPropList (ARPropList, default = None)
 |              (optional) errorActlinkOptions (c_uint, default = None)
 |              (optional) errorActlinkName (ARNameType, default = None)
 |              (optional) objectModificationLogLabel (c_char_p, default = None)
 |      Output: errnr
 |
 |  SetCharMenu(self, name, newName=None, refreshCode=None, menuDefn=None, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      SetCharMenu updates the character menu.
 |
 |      The changes are added to the server immediately and returned to users who
 |      request information about character menus. Because character menus
 |      operate on clients, individual clients do not receive the updated definition
 |      until they reconnect to the form (thus reloading the form from the server).
 |      Input:  name,
 |              (optional) newName,
 |              (optional) refreshCode,
 |              (optional) menuDefn,
 |              (optional) helpText,
 |              (optional) owner,
 |              (optional) changeDiary,
 |              (optional) objPropList
 |              (optional) objectModificationLogLabel
 |      Output: errnr
 |
 |  SetContainer(self, name, newName=None, groupList=None, admingrpList=None, ownerObjList=None, label=None, description=None, type_=None, references=None, removeFlag=None, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      SetContainer  updates the definition for the container.
 |
 |      Input:  Input:  name
 |             (optional) newName (default = None)
 |             (optional) groupList (default = None)
 |             (optional) admingrpList (default = None)
 |             (optional) ownerObjList (default = None)
 |             (optional) label (default = None)
 |             (optional) description (default = None)
 |             (optional) type_ (default = None)
 |             (optional) references (default = None)
 |             (optional) removeFlag (default = None)
 |             (optional) helpText (default = None)
 |             (optional) owner (default = None)
 |             (optional) changeDiary (default = None)
 |             (optional) objPropList (default = None)
 |             (optional) objectModificationLogLabel (default = None)
 |      Output: errnr
 |
 |  SetEscalation(self, name, newName=None, escalationTm=None, schemaList=None, enable=None, query=None, actionList=None, elseList=None, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      SetEscalation updates the escalation with the indicated name on the specified server. The
 |      changes are added to the server immediately and returned to users who request
 |      information about escalations.
 |
 |      Input:  (ARNameType) name,
 |              (ARNameType) newName,
 |             (AREscalationTmStruct) escalationTm,
 |             (ARWorkflowConnectStruct) schemaList,
 |             (c_uint) enable,
 |             (ARQualifierStruct) query,
 |             (ARFilterActionList) actionList,
 |             (ARFilterActionList) elseList,
 |             (c_char_p) helpText,
 |             (ARAccessNameType) owner,
 |             (c_char_p) changeDiary,
 |             (ARPropList) objPropList
 |             (c_char_p) objectModificationLogLabel
 |      Output: errnr
 |
 |  SetField(self, schema, fieldId, fieldName=None, fieldMap=None, option=None, createMode=None, fieldOption=None, defaultVal=None, permissions=None, limit=None, dInstanceList=None, helpText=None, owner=None, changeDiary=None, objPropList=None)
 |      SetField updates the definition for the form field.
 |
 |      arextern.h says the new attribute fieldOption is handed over
 |      to the server as the second to last argument, whereas the
 |      pdf file claims it comes before defaultVal. I'll trust the .h
 |      file more for now...
 |
 |      Input: schema,
 |             fieldId,
 |             fieldName = None,
 |             fieldMap = None,
 |             option = None,
 |             createMode = None,
 |             fieldOption = None,
 |             defaultVal = None,
 |             permissions = None,
 |             limit = None,
 |             dInstanceList = None,
 |             helpText = None,
 |             owner = None,
 |             changeDiary = None
 |             setFieldOptions = 0
 |             objPropList = None
 |      Output: errnr
 |
 |  SetFilter(self, name, newName=None, order=None, workflowConnect=None, opSet=None, enable=None, query=None, actionList=None, elseList=None, helpText=None, owner=None, changeDiary=None, objPropList=None, errorFilterOptions=None, errorFilterName=None, objectModificationLogLabel=None)
 |      SetFilter updates the filter.
 |
 |      The changes are added to the server immediately and returned to users who
 |      request information about filters.
 |      Input:  name,
 |              newName (optional, default = None)
 |              order (optional, default = None)
 |              workflowConnect (optional, default = None)
 |              opSet (optional, default = None)
 |              enable (optional, default = None)
 |              query (optional, default = None)
 |              actionList (optional, default = None)
 |              elseList (optional, default = None)
 |              helpText (optional, default = None)
 |              owner (optional, default = None)
 |              changeDiary (optional, default = None)
 |              objPropList (optional, default = None)
 |              errorFilterOptions (optional, default = None)
 |              errorFilterName (optional, default = None)
 |              (c_char) objectModificationLogLabel (optional, default = None)
 |      Output: errnr
 |
 |  SetGetEntry(self, schema, entryId, fieldList, getTime=0, option=None, idList=None)
 |      SetGetEntry bundles the following API calls into one call:
 |      SetEntry and GetEntry
 |
 |      Please note: self.arsl will be set to the geStatus list!
 |      Input:  schema
 |              entryId: entryId to be updated or for join forms: a list of tuples ((schema, entryid), ...)
 |              fieldList: a dict or a list of tuples: ((fieldid, value), (fieldid, value), ...)
 |              (optional) getTime (the server compares this value with the
 |                          value in the Modified Date core field to
 |                          determine whether the entry has been changed
 |                          since the last retrieval.)
 |              (optional) option (for join forms only; can be AR_JOIN_SETOPTION_NONE
 |                          or AR_JOIN_SETOPTION_REF)
 |              (optional) idList (list of ids or ARInternalIdList)
 |      Output: (getFieldList, seStatus, geStatus) or raise ARErrir in case of Failure
 |
 |  SetImage(self, name, newName=None, imageBuf=None, imageType=None, description=None, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      SetImage updates the image with the indicated name on the specified server. After the
 |      image is updated, the server updates all references and object property timestamps
 |      for schemas affected by the change.
 |      Input: name (ARNameType)
 |             newName (ARNameType, default = None)
 |             imageBuf (ARImageDataStruct, default = None)
 |             imageType (c_char_p, default = None)
 |             description (c_char_p, default= None)
 |             helpText (c_char_p, default = None)
 |             owner (ARAccessNameType, dfault = None)
 |             changeDiary (c_char_p, default = None)
 |             objPropList (ARPropList, default = None)
 |             (c_char) objectModificationLogLabel (optional, default = None)
 |      Output: errnr
 |
 |  SetMultipleFields(self, schema, fieldIdList, fieldNameList=None, fieldMapList=None, optionList=None, createModeList=None, fieldOptionList=None, defaultValList=None, permissionListList=None, limitList=None, dInstanceListList=None, helpTextList=None, ownerList=None, changeDiaryList=None, setFieldOptionList=None, objPropListList=None, setFieldStatusList=None)
 |      SetMultipleFields updates the definition for a list of fields
 |      with the specified IDs on the specified form on the specified server.
 |
 |      This call produces the same result as a sequence of
 |      ARSetField calls to update the individual fields, but it can be more efficient
 |      because it requires only one call from the client to the AR System server and
 |      because the server can perform multiple database operations in a single
 |      transaction and avoid repeating operations such as those performed at the end of
 |      each individual call.
 |
 |  SetSchema(self, name, newName=None, schema=None, schemaInheritanceList=None, groupList=None, admingrpList=None, getListFields=None, sortList=None, indexList=None, archiveInfo=None, auditInfo=None, defaultVui=None, helpText=None, owner=None, changeDiary=None, objPropList=None, setOption=None, objectModificationLogLabel=None)
 |      SetSchema updates the definition for the form.
 |
 |      If the schema is locked, only the indexList and the defaultVui can be set.
 |      Input:  (ARNameType) name,
 |              (ARNameType) newName (optional, default = None),
 |              (ARCompoundSchema) schema (optional, default = None),
 |              (ARSchemaInterheritanceList) schemaInheritanceList (optional, default = None),
 |              (ARPermissionList) groupList (optional, default = None),
 |              (ARInternalIdList) admingrpList (optional, default = None),
 |              (AREntryListFieldList) getListFields (optional, default = None),
 |              (ARSortList) sortList (optional, default = None),
 |              (ARIndexList) indexList (optional, default = None),
 |              (ARArchiveInfoStruct) archiveInfo (optional, default = None),
 |              (ARAuditInfoStruct) auditInfo (optional, default = None),
 |              (ARNameType) defaultVui (optional, default = None),
 |              (c_char_p) helpText (optional, default = None),
 |              (ARAccessNameType) owner (optional, default = None),
 |              (c_char_p) changeDiary (optional, default = None),
 |              (c_uint) objPropList (optional, default = None),
 |              (c_uint) setOption (optional, default = None)
 |              (c_char_p) objectModificationLogLabel (optional, default = None)
 |      Output: errnr
 |
 |  SetTask(self, name, newName, chars=None, owner=None, objProperties=None)
 |      SetTask: undocumented function
 |
 |      Input: (ARNameType) name
 |             (ARNameType) newName
 |             (c_char)  chars
 |             (ARAccessNameType) owner
 |             (ARPropList) objProperties
 |      Output: errnr
 |
 |  SetVUI(self, schema, vuiId, vuiName=None, locale=None, vuiType=None, dPropList=None, helpText=None, owner=None, changeDiary=None, smObjProp=None)
 |      SetVUI updates the form view (VUI).
 |
 |      Input: schema,
 |             vuiId,
 |             (optional) vuiName = None,
 |             (optional) locale = None,
 |             (optional) vuiType=None,
 |             (optional) dPropList=None,
 |             (optional) helpText=None,
 |             (optional) owner=None,
 |             (optional) changeDiary=None
 |             (optional) smObjProp=None
 |      Output: errnr
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from erARS75:
 |
 |  GetActiveLinkFromXML(self, parsedStream, activeLinkName, appBlockName=None)
 |      GetActiveLinkFromXML retrieves an active link from an XML document.
 |
 |      Input: parsedStream
 |             activeLinkName
 |             appBlockName
 |      Output: (ARActiveLinkStruct, supportFileList, arDocVersion) or
 |          None in case of failure
 |
 |  GetCacheEvent(self, eventIdList, returnOption=0)
 |      GetCacheEvent retrieves the list of events that occurred in the
 |      AR System server cache and the number of server caches, and indicates when
 |      administrative operations become public. You can direct this API call to either
 |      return the results immediately or when the next event occurs. This call is useful
 |      for detecting cache events in production cache mode.
 |      In developer cache mode, the call always returns immediately regardless of the
 |      value of the return option. In developer cache mode, there can only ever be one
 |      copy of the cache and it is always public.
 |      Input: eventIdList (ARInternalIdList)
 |             returnOption (c_uint, default = 0, call returns the information immediately)
 |      Output: (eventIdOccuredList (ARInternalIdList), cacheCount (c_uint)) or
 |              None in case of failure
 |
 |  GetDSOPoolFromXML(self, parsedStream, poolName, appBlockName)
 |      ARGetDSOPoolFromXML retrieves information about a DSO pool from a
 |      definition in an XML document.
 |      Input: parsedStream (ARXMLParsedStream)
 |             poolName (ARNameType)
 |             appBlockName (ARNameType)
 |      Output: (enabled (c_uint),
 |          defaultPool (c_uint),
 |          threadCount (c_long),
 |          connection (c_char_p),
 |          polling (c_uint),
 |          pollingInterval (c_uint),
 |          owner (ARAccessNameType),
 |          lastModifiedBy (ARAccessNameType),
 |          modifiedDate (ARTimestamp),
 |          helpText (c_char_p),
 |          changeHistory (c_char_p),
 |          objPropList (ARPropList),
 |          arDocVersion (c_uint)) or None in case of failure
 |
 |  GetImage(self, name)
 |      GetImage retrieves information about the specified image from
 |      the specified server.
 |      Input: name (ARNameType)
 |      Output: (content (ARImageDataStruct),
 |          imageType (c_char_p),
 |          timestamp (ARTimeStamp),
 |          checkSum (c_char_p),
 |          description (c_char_p),
 |          helpText (c_char_p),
 |          owner (ARAccessNameType),
 |          changeDiary (c_char_p),
 |          objPropList (ARPropList)) or None in case of failure
 |
 |  GetImageFromXML(self, parsedStream, imageName, appBlockName)
 |      ARGetImageFromXML retrieves information about an image from an XML
 |      document.
 |      Input: parsedStream (ARXMLParsedStream)
 |             imageName (ARNameType)
 |             appBlockName (ARNameType)
 |      Output: (imageType (c_char_p),
 |              contentLength (c_uint),
 |              checksum (c_char_p),
 |              timestamp (ARTimestamp),
 |              description (c_char_p),
 |              owner (ARAccessNameType),
 |              lastModifiedBy (ARAccessNameType),
 |              helpText (c_char_p),
 |              changeHistory (c_char_p),
 |              objPropList (ARPropList),
 |              imageCon (c_char_p)) or None in case of failure
 |
 |  GetListEntryWithMultiSchemaFields(self, queryFromList, getListFields=None, qualifier=None, sortList=None, firstRetrieve=0, maxRetrieve=0, useLocale=False)
 |      GetListEntryWithMultiSchemaFields performs dynamic joins by querying across multiple forms—including view and
 |      vendor forms—at run time.
 |      Input: queryFromList (ARMultiSchemaQueryFromList)
 |             (optional) getListFields (ARMultiSchemaFieldIdList, deafult =None),
 |             (optional) qualifier (ARMultiSchemaQualifierStruct, default = None),
 |             (optional) sortList (ARMultiSchemaSortList, default = None),
 |             (optional) firstRetrieve (c_uint, default=cars.AR_START_WITH_FIRST_ENTRY),
 |             (optional) maxRetrieve (c_uint, default=cars.AR_NO_MAX_LIST_RETRIEVE),
 |             (optional) useLocale (ARBoolean, default = False)
 |      Output: (ARMultiSchemaFieldValueListList, numMatches (c_uint))
 |
 |  GetListImage(self, schemaList=None, changedSince=0, imageType=None)
 |      GetListImage retrieves a list of image names from the specified
 |      server. You can retrieve all images or limit the list to those images associated
 |      with particular schemas, those modified after a specified time, and those of a
 |      specific type.
 |      Input: schemaList (list of names),
 |             changedSince (ARTimestamp, default = 0),
 |             imageType (c_char_p, default = None)
 |      Output: imageList (ARNameList) or raise ARError in case of failure
 |
 |  GetMultipleImages(self, changedSince=0, nameList=None)
 |      GetMultipleImages retrieves information from the specified server
 |      about the images whose names are specified in the nameList parameter. This function
 |      performs the same action as ARGetImage, but it is more efficient than retrieving
 |      information about multiple images one by one.
 |      Input: (optional) changedSince (c_uint, default = 0),
 |             (optional) nameList (ARNameList, default = None)
 |      Output:
 |
 |  GetObjectChangeTimes(self)
 |      GetObjectChangeTimes retrieves timestamps for the last create,
 |      modify, and delete operations for each type of server object.
 |      Input:
 |      Output: ARObjectChangeTimestampList or None in case of failure
 |
 |  GetOneEntryWithFields(self, schema, qualifier=None, getListFields=None, sortList=None, useLocale=False)
 |      GetOneEntryWithFields retrieves one entry from AR System matching a given qualification. Similar to
 |      ARGetListEntryWithFields, with the following behavioral changes:
 |      - If the qualifier in the API call matches multiple records, only the first is returned.
 |      - Get filters on the form being queried are fired for that one record.
 |      This function is equivalent to issuing an ARGetListEntry call followed by
 |      ARGetEntry with one of the entry IDs.
 |      The keyword $LASTCOUNT$ is set to the number of entries matched, even though
 |      only one is returned.
 |      Input: schema (ARNameType)
 |             (default) qualifier (ARQualifierStruct, default = None)
 |             (default) getListFields (AREntryListFieldList, default = None)
 |             (default) sortList (ARSortList, default = None)
 |             (default) useLocale (ARBoolean, default = False)
 |      Output: (entryList (AREntryListFieldValueList), numMatches (c_uint))
 |
 |  RunEscalation(self)
 |
 |  SetActiveLinkToXML(self, activeLinkName)
 |      SetActiveLinkToXML converts active links to XML.
 |
 |      Input: activeLinkName (ARNameType),
 |      Output: string containing the XML
 |              or None in case of failure
 |
 |  SetDSOPoolToXML(self, poolName, xmlDocHdrFtrFlag=False, enabled=0, defaultPool=True, threadCount=0, connection=None, polling=c_ulong(0L), pollingInterval=c_ulong(0L), owner=None, lastModifiedBy=None, modifiedDate=0, helpText=None, changeHistory=None, objPropList=None, arDocVersion=c_ulong(0L))
 |      SetDSOPoolToXML retrieves information about the DSO pool.
 |
 |      Input:
 |      Output: string containing the XML
 |              or None in case of failure
 |
 |  SetImageToXML(self, imageName, xmlDocHdrFtrFlag, imageType, description, owner, lastModifiedBy, helpText, changeHistory, objPropList, checksum, modifiedDate, imageContent)
 |      SetImageToXML saves information about an image to an XML document.
 |      Input: ARNameType imageName
 |             ARBoolean xmlDocHdrFtrFlag
 |      char *imageType,
 |      char *description
 |      ARAccessNameType owner,
 |      ARAccessNameType lastModifiedBy,
 |      char *helpText,
 |      char *changeHistory,
 |      ARPropList *objPropList,
 |      char checksum,
 |      ARTimestamp *modifiedDate,
 |      ARImageDataStruct imageContent
 |      Output: errnr
 |
 |  WfdClearAllBreakpoints(self)
 |      WfdClearAllBreakpoints removes all breakpoints from the server..
 |
 |      Input:
 |      Output: errnr
 |
 |  WfdClearBreakpoint(self, bpId)
 |      WfdClearBreakpoint removes the specified breakpoint from the server.
 |
 |      Input: bpId (c_uint)
 |      Output: errnr
 |
 |  WfdExecute(self, mode=0)
 |      WfdExecute instructs the debug server to begin execution.
 |      Input: (optional) mode  (c_uint, default: single step)
 |      Output: errnr
 |
 |  WfdGetCurrentLocation(self, howFarBack=0)
 |      WfdGetCurrentLocation description Requests the current location
 |      of the worker thread during debugging.
 |      Input: (optional) howFarBack (c_uint, default = 0)
 |      Output: location
 |
 |  WfdGetDebugMode(self)
 |      WfdGetDebugMode returns the current debug mode.
 |      Input:
 |      Output: integer (current debug mode)
 |
 |  WfdGetFieldValues(self, howFarBack=0)
 |      WfdGetFieldValues Requests the field-value list associated with
 |      the current schema at the current location.
 |      Input: (optional) howFarBack (c_uint, default = 0)
 |      Output:
 |
 |  WfdGetFilterQual(self)
 |      WfdGetFilterQual requests the field-value list associated with
 |      the current schema at the current location.
 |      Input:
 |      Output: filterQual (ARQualifierStruct)
 |
 |  WfdGetKeywordValue(self, keywordId)
 |      WfdGetKeywordValue retrieves the value of a keyword, if possible.
 |      Input: keywordId (c_uint)
 |      Output: ARValueStruct
 |
 |  WfdGetUserContext(self, mask=0)
 |      ARWfdGetUserContext retrieves information associated with the workflow user.
 |      Input: mask (c_uint)
 |      Output: ARWfdUserContext
 |
 |  WfdListBreakpoints(self)
 |      ARWfdListBreakpoints returns a list of server breakpoints.
 |      Input:
 |      Output: ARWfdRmtBreakpointList (or None in case of failure)
 |
 |  WfdSetBreakpoint(self, inBp)
 |      WfdSetBreakpoint sets a breakpoint on the server, and overwrites
 |      if needed.
 |      Input: inBp (ARWfdRmtBreakpoint)
 |      Output: errnr
 |
 |  WfdSetDebugMode(self, mode=0)
 |      WfdSetDebugMode sets a new debug mode.
 |      Input: (optional) mode (c_uint, default: WFD_EXECUTE_STEP)
 |      Output: errnr
 |
 |  WfdSetFieldValues(self, trFieldList, dbFieldList)
 |      WfdSetFieldValues overwrites the field-value list associated
 |      with the current schema at the current location.
 |      Input: trFieldList (ARFieldValueList)
 |             dbFieldList (ARFieldValueList)
 |      Output: errnr
 |
 |  WfdSetQualifierResult(self, result)
 |      ARWfdSetQualifierResult forces the qualifier result to the specified
 |      Boolean value.
 |      Input: result (ARBoolean)
 |      Output: errnr
 |
 |  WfdTerminateAPI(self, errorCode)
 |      WfdTerminateAPI causes workflow to return with an optionally
 |      specified error at the next opportunity. If an error is not specified, a generic
 |      TERMINATED_BY_DEBUGGER error will be returned
 |      Input: errorCode (c_uint)
 |      Output: errnr
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from erARS71:
 |
 |  GetFilterFromXML(self, parsedStream, filterName)
 |      GetFilterFromXML retrieves a filter from an XML document.
 |
 |      Input: (ARXMLParsedStream) parsedStream
 |             (ARNameType) filterName
 |      Output: (ARFilterStruct, arDocVersion)
 |              or None in case of failure
 |
 |  GetMultipleFilters(self, changedSince=0, nameList=None, orderListP=True, workflowConnectListP=True, opSetListP=False, enableListP=False, queryListP=False, actionListListP=False, elseListListP=False, helpTextListP=False, timestampListP=False, ownerListP=False, lastChangedListP=False, changeDiaryListP=False, objPropListListP=False, errorFilterOptionsListP=False, errorFilterNameListP=False)
 |      GetMultipleFilters retrieves information about a group of filters
 |      on the specified server with the names specified by the nameList
 |      parameter.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from erARS70:
 |
 |  GetClientCharSet(self)
 |
 |  GetServerCharSet(self)
 |
 |  ServiceEntry(self, schema, entryId=None, fieldValueList=None, internalIdList=None)
 |      ServiceEntry retrieves the form entry with the indicated ID.
 |
 |      ServiceEntry retrieves the form entry with the indicated ID on
 |      the specified server.
 |      Input: schema: string
 |             entry: list of (fieldid, value)
 |             (optional) idList: list of fieldids (default: None, retrieve no fields)
 |      Output: python dictionary
 |
 |  SetImpersonatedUser(self, name)
 |
 |  SetSchemaToXML(self, schemaName, xmlDocHdrFtrFlag=0, compoundSchema=None, permissionList=None, subAdminGrpList=None, getListFields=None, sortList=None, indexList=None, archiveInfo=None, auditInfo=None, defaultVui=None, nextFieldID=None, coreVersion=0, upgradeVersion=0, fieldInfoList=None, vuiInfoList=None, owner=None, lastModifiedBy=None, modifiedDate=None, helpText=None, changeHistory=None, objPropList=None, arDocVersion=0)
 |      Dump Schema to XML according...
 |
 |      This function dumps a schema definition into a string in
 |      XML format; this implementation takes as  arguments the structs
 |      that drive the xml output.
 |      If you want the more convenient XML output, call ERSetSchemaToXML
 |      It is important to understand that this function is executed on the
 |      client side; in other words, the user is responsible for fetching
 |      all relevant information and handing it over to this function.
 |      This call really only transforms the information into XML.
 |      Input: context
 |             schemaName
 |             (optional) xmlDocHdrFtrFlag (default: 0)
 |             (optional) compoundSchema (default: None)
 |             (optional) permissionList (default: None)
 |             (optional) subAdminGrpList (default: None)
 |             (optional) getListFields (default: None)
 |             (optional) sortList (default: None)
 |             (optional) indexList (default: None)
 |             (optional) auditInfo (default: None)
 |             (optional) indexList (default: None)
 |             (optional) defaultVui (default: None)
 |             (optional) nextFieldID (default: None)
 |             (optional) coreVersion (default: 0)
 |             (optional) upgradeVersion (default: 0)
 |             (optional) fieldInfoList (default: None)
 |             (optional) vuiInfoList (default: None)
 |             (optional) owner (default: None)
 |             (optional) lastModifiedBy (default: None)
 |             (optional) modifiedDate (default: None)
 |             (optional) helpText (default: None)
 |             (optional) changeHistory (default: None)
 |             (optional) objPropList (default: None)
 |             (optional) arDocVersion (default: 0)
 |      Output: string containing the XML.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from erARS63:
 |
 |  BeginBulkEntryTransaction(self)
 |      BeginBulkEntryTransaction marks the beginning of a series of
 |      entry API function calls.
 |
 |      Those function calls will be grouped together and sent
 |      to the AR System server as part of one transaction. All calls
 |      related to create, set, delete, and merge operations made between
 |      this API call and a trailing AREndBulkEntryTransaction call will
 |      not be sent to the server until the trailing call is made.
 |      Input:
 |      Output: errnr
 |
 |  EndBulkEntryTransaction(self, actionType=1)
 |      EndBulkEntryTransaction marks the ending of a series of entry API function calls that
 |      are grouped together and sent to the AR System server as part
 |      of one transaction. All calls related to create, set, delete,
 |      and merge operations made before this API call and after the
 |      preceding ARBeginBulkEntryTransaction call will be sent to the
 |      server when this call is issued and executed within a single
 |      database transaction.
 |
 |  GetEntryBlock(self, entryBlockList, blockNumber=0)
 |      GetEntryBlock retrieves a list of entries contained in a block of entries
 |      retrieved using ARGetListEntryBlocks.
 |
 |      Input: entryBlockList
 |             (optional) blockNumber (default = 0)
 |      Output: dictionary {entryid: {fieldid1 : value, ...}, ...}
 |              or None in case of failure
 |
 |  GetListEntryBlocks(self, schema, query=None, getListFields=None, sortList=None, numRowsPerBlock=50, firstRetrieve=0, maxRetrieve=0, useLocale=False)
 |      GetListEntryBlocks retrieves a list of blocks of entries from
 |      the specified server. Data is returned as a data structure,
 |      AREntryListBlock. Entries are encapsulated in the AREntryListBlock
 |      data structure and divided into blocks of entries. You call
 |      ARGetEntryBlock with a block number to return a list of entries for
 |      that block.
 |      Input:
 |      Output: (entryBlockList (AREntryBlockList),
 |               numReturnedRows,
 |               numMatches)
 |               or None in case of failure
 |
 |  GetMultipleVUIs(self, schema, wantList=None, changedSince=0)
 |      GetMultipleVUIs retrieves information about a group of form views
 |      (VUIs) on the specified server with the names specified by
 |      the nameList parameter.
 |
 |  Login(self, server, username, password, language='', authString='', tcpport=0, rpcnumber=0, charSet='', timeZone='', customDateFormat='', customTimeFormat='', separators='', cacheId=0, operationTime=0, sessionId=0)
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from erARS60:
 |
 |  ExportLicense(self)
 |      ARExportLicense specifies a pointer that is set to malloced
 |      space and contains the full contents of the license file currently
 |      on the server. This buffer can be written to a file to produce
 |      an exact replication of the license file, including all checksums
 |      and encryption.
 |
 |  GetApplicationState(self, applicationName)
 |      Retrieves the application state: maintenance (admin only),
 |      test, or production.
 |
 |  GetListActiveLink(self, schema=None, changedSince=0, objPropList=None)
 |      GetListActiveLink retrieves a list of active links for a schema/server.
 |
 |      GetListActiveLink retrieves a list of active links for a schema/server
 |      Input:
 |             (optional) schema (default: None)
 |             (optional) changedSince (default: 0)
 |             (optional) objPropList  (default: None)
 |      Output: (name1, name2, ...) or None in case of failure
 |
 |  GetListApplicationState(self)
 |      GetListApplicationState retrieves the list of application states
 |      (maintenance, test, or production) that an application on this server
 |      can assume. This list is server-dependent.
 |      Input:
 |      Output: (name1, name2, ...) or None in case of failure
 |
 |  GetListCharMenu(self, changedSince=0, formList=None, actLinkList=None, objPropList=None)
 |      GetListCharMenu retrieves a list of character menus.
 |
 |      Input: (int) changedSince (optional, default = 0)
 |             (tuple of names) formList (optional, default = None)
 |             (tuple of names) actLinkList (optional, default = None)
 |             (ARPropList) objPropList (optional, default = None)
 |      Output: (name1, name2, ...) or None in case of failure
 |
 |  GetListContainer(self, changedSince=0, containerArray=0, attributes=1024, ownerObjList=None, objPropList=None)
 |      GetListContainer retrieves a list of containers.
 |
 |      GetListContainer retrieves a list of containers.
 |      Input: (optional) changedSince (default: 0)
 |             (optional) containerArray: array of values representing
 |             container types (default: ARCON_ALL)
 |             (optional) attributes (default: cars.AR_HIDDEN_INCREMENT)
 |             (optional) ownerObjList (default: None)
 |             (optional) objPropList (Default: None)
 |      Output: ARContainerInfoList (or None in case of failure)
 |
 |  GetListEntry(self, schema, query=None, getListFields=None, sortList=None, firstRetrieve=0, maxRetrieve=0, useLocale=False)
 |      GetListEntry retrieves a list of entries for a schema.
 |
 |      GetListEntry retrieves a list of entries/objects for a specific schema
 |      according to specific search query.
 |
 |      Input: schema/form name
 |             (optional) query string
 |             (optional) getListFields (default: None)
 |             (optional) sortList (default: None; can be
 |                     ((fieldid, 1), (id2, 0), ...)
 |                     with sec. parameter 0 = ascending
 |             (optional) firstRetrieve (default: AR_START_WITH_FIRST_ENTRY)
 |             (optional) maxRetrieve (default: AR_NO_MAX_LIST_RETRIEVE)
 |             (optional) useLocale (default: False)
 |      Output: (list ((entryid , shortdesc) , ...), numMatches) or raise ARError in case of failure.
 |      It is important that the query looks something like this:
 |      'field' = "value" (please note the quotation marks).
 |
 |  GetListEntryWithFields(self, schema, query, getListFields=None, sortList=None, firstRetrieve=0, maxRetrieve=0, useLocale=False)
 |      GetListEntryWithFields retrieve a list of entries for a schema.
 |
 |      GetListEntryWithFields retrieve a list of entries/objects for a
 |      specific schema according to specific search query together with
 |      their fields and values.
 |
 |      Input: schema/form name
 |             query string
 |             (optional) getListFields (default: None)
 |             (optional) sortList (default: None)
 |             (optional) firstRetrieve (default: AR_START_WITH_FIRST_ENTRY)
 |             (optional) maxRetrieve (default: AR_NO_MAX_LIST_RETRIEVE)
 |             (optional) useLocale (default: False)
 |      Output: (list ((entryid , { fid1 : value1, ...}), ()....), numMatches) or raise ARError in case of failure.
 |      It is important that the query looks something like this:
 |      'field' = "value" (please note the quotation marks).
 |
 |  GetListEscalation(self, schema=None, changedSince=0, objPropList=None)
 |      GetListEscalation retrieves a list of all escalations.
 |
 |      GetListEscalation retrieves a list of all escalations.
 |      Input:
 |             (optional) schema (default: None)
 |             (optional): changedSince (default: 0)
 |             (optional) objPropList (default: None)
 |      Output: (name1, name2, ...) or None in case of failure
 |
 |  GetListFilter(self, schema=None, changedSince=0, objPropList=None)
 |      GetListFilter return a list of all available filter for a schema.
 |
 |      GetListFilter return a list of all available filter for a schema/server.
 |      Input:
 |             (optional) schema (default: None -- retrieve filter for server)
 |             (optional) changedSince (default: 0)
 |             (optional) objPropList (default: None)
 |      Output: (name1, name2, ...) or None in case of failure
 |
 |  GetListRole(self, applicationName, userName=None, password=None)
 |      GetListRole retrieves a list of roles for a deployable application
 |      or returns a list of roles for a user for a deployable application.
 |
 |  GetListSchema(self, changedSince=0, schemaType=1024, name='', fieldIdArray=None, objPropList=None)
 |      GetListSchema return a list of all available schemas
 |
 |      GetListSchema returns a list of all available schemas
 |      Input: (optional) changedSince: a timestamp (default: 0)
 |             (optional) schemaType (default: AR_LIST_SCHEMA_ALL | AR_HIDDEN_INCREMENT)
 |             (optional) name (default "", only necessary if schemaType is
 |             AR_LIST_SCHEMA_UPLINK
 |             (optional) fieldIdArray (default: None) ARS then only returns the
 |             forms that contain all the fields in this list.
 |      Output: (name1, name2, ...) or None in case of failure
 |
 |  GetListSchemaWithAlias(self, changedSince=0, schemaType=1024, name='', fieldIdArray=None, vuiLabel=None, objPropList=None)
 |      GetListSchemaWithAlias retrieves a list of form definitions and
 |      their corresponding aliases.
 |      Input: (optional) changedSince: a timestamp (default: 0)
 |             (optional) schemaType (default: AR_LIST_SCHEMA_ALL | AR_HIDDEN_INCREMENT)
 |             (optional) name (default "", only necessary if schemaType is
 |             AR_LIST_SCHEMA_UPLINK
 |             (optional) fieldIdArray (list of fieldids; default: None; ARS then only returns the
 |                     forms that contain all the fields in this list)
 |             vuiLabel
 |             objPropList
 |      Output: ((name1, alias1), (name2, alias2),...)
 |                  or None in case of failure
 |
 |  GetMultipleCharMenus(self, changedSince=0, nameList=None)
 |      GetMultipleCharMenus retrieves information about a group of
 |      character menus on the specified server with the names specified
 |      by the nameList parameter.
 |
 |  GetMultipleContainers(self, changedSince=0, nameList=None, containerTypes=None, attributes=1024, ownerObjList=None, refTypes=None, containerNameListP=True, groupListListP=False, admingrpListListP=False, ownerObjListListP=False, labelListP=False, descriptionListP=False, typeListP=False, referenceListP=False, helpTextListP=False, ownerListP=False, timestampListP=False, lastChangedListP=False, changeDiaryListP=False, objPropListListP=False)
 |      GetMultipleContainers retrieves multiple container objects.
 |
 |  GetMultipleEntryPoints(self, changedSince, appNameList, refTypeList, displayTag=None, vuiType=0, entryPointNameListP=False, entryPointTypeListP=False, entryPointDLabelListP=False, ownerAppNameListP=False, ownerAppDLabelListP=False, groupListListP=False, ownerObjListListP=False, descriptionListP=False, referencesListP=False, helpTextListP=False, timestampListP=False, objPropListListP=False)
 |      GetMultipleEntryPoints retrieves the entry points of multiple
 |      applications. It returns the entry points that are accessible by
 |      the user, taking into account user permissions, licenses,
 |      and application states.
 |
 |  GetMultipleEscalations(self, changedSince=0, nameList=None, esclTmListP=True, workflowConnectListP=True, enableListP=False, queryListP=False, actionListListP=False, elseListListP=False, helpTextListP=False, timestampListP=False, ownerListP=False, lastChangedListP=False, changeDiaryListP=False, objPropListListP=False)
 |      GetMultipleEscalations retrieves information about a group
 |      of escalations on the specified server with the names specified by
 |      the nameList parameter.
 |
 |  ImportLicense(self, importBuf, importOption=0)
 |      ImportLicense imports a buffer, which is the contents of a license file, including checksums
 |      and encryption and an option, which tells whether to overwrite the existing
 |      license file or append to it.
 |      When called, the server validates that the buffer is a valid license file and
 |      either appends the licenses in the file to the existing license file or replaces the
 |      existing license file with the new file.
 |                  Input:  importBuf,
 |                          importOption
 |                  Output: errnr
 |
 |  SetApplicationState(self, applicationName, stateName)
 |      SetApplicationState sets the application state (maintenance, test, or production)
 |      in the AR System Application State form.
 |
 |      Input:  applicationName,
 |              stateName
 |      Output: errnr
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from erARS51:
 |
 |  APIVersion(self)
 |
 |  CreateAlertEvent(self, user, alertText, priority=0, sourceTag='AR', serverName='@', formName=None, objectId=None)
 |      CreateAlertEvent enters an alert event.
 |
 |      CreateAlertEvententers an alert event on the specified server. The AR System server
 |      sends an alert to the specified, registered users.
 |      Input: user (ARAccessNameType)
 |             alertText (c_char_p)
 |             (optional) priority (c_int, default = 0)
 |             (optional) sourceTag (ARNameType, default = AR)
 |             (optional) serverName (ARServerNameType, default = @)
 |             (optional) formName (ARNameType, default = None)
 |             (optional) objectId (c_char_p, default = None)
 |      Output: entryId (AREntryIdType) or None in case of error
 |
 |  CreateEntry(self, schema, fieldList)
 |      CreateEntry creates a new entry in the indicated schema.
 |
 |      You can create
 |      entries in base schemas only. To add entries to join forms,create them
 |      in one of the underlying base forms.
 |      pyars will generate the fieldList for you automatically.
 |      Input: schema
 |             a tuple consisting of (fieldid, value) pairs
 |      Output: entryId (AREntryIdType) (or raise ARError in case of error)
 |
 |  CreateLicense(self, licenseInfo)
 |      Input: licenseInfo
 |      Output:
 |
 |  CreateSupportFile(self, fileType, name, id2, fileId, filePtr)
 |      CreateSupportFile creates a file that clients can retrieve by using the AR System.
 |      Input:
 |      Output:
 |
 |  DateToJulianDate(self, date)
 |      DateToJulianDate converts a year, month, and day value to a Julian date.
 |
 |      DateToJulianDate converts a year, month, and day value to a Julian date. The Julian
 |      date is the number of days since noon, Universal Time, on January 1, 4713
 |      BCE (on the Julian calendar). The changeover from the Julian calendar to the
 |      Gregorian calendar occurred in October, 1582. The Julian calendar is used
 |      for dates on or before October 4, 1582. The Gregorian calendar is used for
 |      dates on or after October 15, 1582.
 |      Input: date (a list of (year, month, day)
 |      Output: jd
 |
 |  DecodeARAssignStruct(self, assignText)
 |      DecodeARAssignStruct converts a serialized assign string in a .def file into an
 |      ARAssignStruct structure to facilitate string import.
 |      Input: assignText
 |      Output: assignStruct
 |
 |  DecodeARQualifierStruct(self, qualText)
 |      DecodeARQualifierStruct converts a serialized qualifier string into
 |      an ARQualifierStruct structure.
 |      Input: qualText
 |      Output: qualStruct
 |
 |  DecodeAlertMessage(self, message, messageLen)
 |      DecodeAlertMessage decodes a formatted alert message and returns the
 |      component parts of the message to the alert client.
 |
 |      Input: message
 |             messageLen
 |      Output: a list of (timestamp, sourceType, priority, alertText, sourceTag, serverName,
 |      serverAddr, formName, objectId)
 |
 |  DecodeDiary(self, diaryString)
 |      DecodeDiary parses any diary field (including the changeDiary associated with
 |      every AR System object) into user, time stamp, and text components.
 |
 |      Input: diaryString
 |      Output: diaryList
 |
 |  DecodeStatusHistory(self, statHistString)
 |      DecodeStatusHistory parses the Status History core field into user and
 |      time stamp components.
 |      Input: statHistString
 |      Output: statHistList
 |
 |  DeleteEntry(self, schema, entryId, option=0)
 |      DeleteEntry deletes the form entry with the indicated ID from
 |      the specified server.
 |
 |      Input: schema
 |             entryId
 |             option
 |      Output: errnr
 |
 |  DeleteField(self, schema, fieldId, deleteOption=0)
 |      DeleteField deletes the form field with the indicated ID
 |      from the specified server.
 |
 |      Input: schema
 |             fieldId
 |             deleteOption
 |      Output: error number
 |
 |  DeleteLicense(self, licenseType, licenseKey)
 |      DeleteLicense deletes an entry from the license file for the current server.
 |
 |      Input: licenseType
 |             licenseKey
 |      Output: errnr
 |
 |  DeleteMultipleFields(self, schema, fieldList, deleteOption)
 |      DeleteMultipleFields deletes the form fields with the indicated IDs from
 |      the specified server.
 |
 |      Input: schema
 |             fieldList
 |             deleteOption
 |      Output: errnr
 |
 |  DeleteSupportFile(self, fileType, name, id2, fileId)
 |      DeleteSupportFile deletes a support file in the AR System.
 |
 |      Input:
 |             fileType,
 |             name
 |             id2 (if name is not a form, set id2 to 0.)
 |             fileId
 |      Output: errnr
 |
 |  DeleteVUI(self, schema, vuiId)
 |      DeleteVUI deletes the form view (VUI) with the indicated ID from the specified server.
 |
 |      Input:
 |             schema
 |             vuiId
 |      Output:
 |
 |  DeregisterForAlerts(self, clientPort)
 |      DeregisterForAlerts cancels registration for the specified user on the
 |      specified AR System server and port.
 |
 |      Input: clientPort
 |      Output:
 |
 |  EncodeARAssignStruct(self, assignStruct)
 |      EncodeARAssignStruct converts an ARAssignStruct structure into a serialized
 |      assignment string.
 |
 |      Input: assignStruct
 |      Output: assignText
 |
 |  EncodeARQualifierStruct(self, qualStruct)
 |      EncodeARQualifierStruct converts an ARQualifierStruct into a serialized qualification string.
 |
 |      Input:  qualStruct
 |      Output: qualText
 |
 |  EncodeDiary(self, diaryList)
 |      Input: diaryList
 |      Output: diaryString
 |
 |  EncodeStatusHistory(self, statHistList)
 |      Input: statHistList
 |      Output: statHistString
 |
 |  ExecuteProcess(self, command, runOption)
 |      ExecuteProcess performs the indicated command on the specified server.
 |
 |      Input: command
 |             (optional) runOption (if set to 0 (default), operate synchronously
 |      Output: synchron: (returnStatus, returnString)
 |             asynchron: (1, '')
 |
 |  ExpandCharMenu(self, menuIn)
 |      ExpandCharMenu expands the references for the specified menu definition and
 |      returns a character menu with list-type items only.
 |
 |      Input:  (ARCharMenuStruct) menuIn
 |      Output: ARCharMenuStruct
 |
 |  Free(self, obj, freeStruct=False)
 |
 |  GetActiveLink(self, name)
 |      GetActiveLink retrieves the active link with the indicated name.
 |
 |      GetActiveLink retrieves the active link with the indicated name on
 |      the specified server.
 |      Input: name
 |      Output: ARActiveLinkStruct (containing): order, schemaList,
 |                 groupList, executeMask, controlField,
 |                 focusField, enable, query, actionList,
 |                 elseList, helpText, timestamp, owner, lastChanged,
 |                 changeDiary, objPropList
 |
 |  GetAlertCount(self, qualifier=None)
 |      GetAlertCount retrieves the count of qualifying alert events
 |      located on the server.
 |
 |      GetAlertCount retrieves the count of qualifying alert events located
 |      on the specified server.
 |      Input: (optional) qualifier (default: None)
 |      Output: count / None
 |
 |  GetAllApplicationNames(self)
 |      return a list of all containers of type application
 |
 |  GetAllFieldNames(self, schema, idList=None, fieldType=1)
 |      GetAllFieldNames retrieves all fieldids and names of a given field type
 |      for a given schema; this is the opposite function of GetFieldTable.
 |
 |      GetAllFieldNames returns dictionary of field ids and field names. If you do not
 |      supply a list of fieldIds, GetFieldTable will retrieve the fields for you
 |      by calling ARGetListField, using the option specified in fieldType (defaults
 |      to cars.AR_FIELD_TYPE_DATA, i.o.w., it will fetch the info for all data fields).
 |      input: schema
 |              (optional) idList (default: None; can be an ARInternalIdList or a tuple of fieldids)
 |              fieldType: (default: data fields)
 |      output: dictionary {fieldid1: name1, fieldid2: name2,...} or None in case of failure
 |
 |  GetCharMenu(self, name)
 |      GetCharMenu retrieves information about the character menu with the indicated name.
 |
 |      Input: name
 |      Output: ARMenuStruct (refreshCode, menuDefn, helpText,timestamp,owner,lastChanged,
 |      changeDiary,objPropList)
 |
 |  GetContainer(self, name, refTypes=1)
 |      Input: name
 |             (optional) refTypes (a list of ARREF types, e.g. (ARREF_SCHEMA,
 |                                  ARREF_FILTER, ARREF_ESCALATION))
 |      Output: ARContainerStruct (groupList, admingrpList, ownerObjList, label, description,
 |      type,references,helpText,owner,timestamp,lastChanged,changeDiary,objPropList)
 |
 |  GetContainerFromXML(self, parsedStream, containerName)
 |
 |  GetControlStructFields(self)
 |      GetControlStructFields returns the single pieces of the control record.
 |
 |      ARGetControlStructFields returns the single pieces of the control
 |      record. This method actually is not necessary in python, as we have
 |      direct access to the members of the struct; however to be
 |      compatible with arsjython and ARSPerl, we implement this method.
 |      Input:
 |      Output: (cacheId, errnr, operationTime, user, password, localeInfo, ,
 |               sessionId, authString, server)
 |
 |  GetCurrencyRatio(self, currencyRatios, fromCurrencyCode, toCurrencyCode)
 |      GetCurrencyRatio retrieves a selected currency ratio from a set of ratios returned
 |      when the client program makes a call to GetMultipleCurrencyRatioSets.
 |      Input: currencyRatios
 |             fromCurrencyCode
 |             toCurrencyCode
 |      Output: currencyRatio
 |
 |  GetCurrentServer(self)
 |
 |  GetDSOMappingFromXML(self, parsedStream, mappingName)
 |
 |  GetEntry(self, schemaString, entry, idList=None)
 |      GetEntry retrieves the form entry with the indicated ID.
 |
 |      GetEntry retrieves the form entry with the indicated ID on
 |      the specified server.
 |      Input: schemaString
 |             entry: string with id (or tuple for join)
 |             (optional) idList (default: None, retrieve no fields)
 |      Output: python dictionary or raise ARError in case of failure
 |
 |  GetEntryBLOB(self, schema, entry, id_, loc)
 |      GetEntryBLOB
 |      Input: schema: schema name
 |             entry: entry id(s)
 |             id_: fieldId
 |             loc: ARLocStruct
 |      Output: (in loc)
 |
 |  GetEntryStatistics(self, schema, query=None, target=None, statistic=1, groupByList=None)
 |      GetEntryStatistics computes the indicated statistic for the form entries
 |      that match the conditions specified by the qualifier parameter.
 |      Input: schema
 |             query
 |             target
 |             statistic
 |             groupByList
 |      Output: results
 |
 |  GetEscalation(self, name)
 |      GetEscalation
 |      Input: name
 |      Output: AREscalationStruct
 |
 |  GetEscalationFromXML(self, parsedStream, escalationName)
 |
 |  GetField(self, schema, fieldId)
 |      GetField retrieves the information for one field on a form and stores
 |      the information in the internal cache.
 |
 |      GetField returns a ARFieldInfoStruct for a given fieldid.
 |      Input: schema
 |             fieldId
 |      Output: ARFieldInfoStruct or None in case of failure
 |
 |  GetFieldByName(self, schemaString, fieldName)
 |      GetFieldByName is a shortcut function that combines ars_GetListField
 |      and ars_GetField. Given a schema name and field name, it returns the field id.
 |      If you need more than a few field id's, use GetFieldTable.
 |      Input: schemaString
 |             fieldName
 |      Output: fieldid or None in case of failure
 |
 |  GetFieldTable(self, schemaString, idList=None, fieldType=1)
 |      GetFieldTable returns a dictionary of field name and field ID.
 |      This is the opposite function of GetAllFieldNames.
 |
 |      GetFieldTable returns dictionary of field names and field ids. If you do not
 |      supply a list of fieldIds, GetFieldTable will retrieve the fields for you
 |      by calling ARGetListField, using the option specified in fieldType (defaults
 |      to cars.AR_FIELD_TYPE_DATA, i.o.w., it will fetch the info for all data fields).
 |
 |      Input: schemaString
 |             (optional) idList (default: None; can be an ARInternalIdList or a tuple of fieldids)
 |             (optional) fieldType (default: cars.AR_FIELD_TYPE_DATA)
 |      Output: dictionary of {field_name : field_id, ...} or None in case of failure
 |
 |  GetFilter(self, name)
 |      GetFilter retrieves a filter with a given name and stores
 |      the information in the internal cache.
 |
 |      Input: filter name
 |      Output: ARFilterStruct (order, schemaList, opSet, enable, query, actionList,
 |                 elseList, helpText, timestamp, owner, lastChanged,
 |                 changeDiary, objPropList)
 |
 |  GetFullTextInfo(self, requestArray)
 |      GetFullTextInfo
 |      Input: requestArray: array of integers representing the requested information
 |      Output: fullTextInfo
 |
 |  GetListAlertUser(self)
 |      GetListAlertUser retrieves a list of all users that are registered
 |      for alerts.
 |
 |      Input:
 |      Output: (name1, name2, ...) or None in case of failure
 |
 |  GetListExtSchemaCandidates(self, schemaType=1031)
 |      GetListExtSchemaCandidates retrieves a list of all available external data
 |      source tables (schema candidates).
 |      Input: schemaType
 |      Output: ARCompoundSchemaList (or None in case of failure)
 |
 |  GetListField(self, schema, changedSince=0, fieldType=1)
 |      GetListField returns a list of field ids for a schema.
 |
 |      Input: string: schema
 |             (optional) timestamp: changedSince (dfault: 0)
 |             (optional) fieldType (default: AR_FIELD_TYPE_DATA)
 |      Output: (fieldid1, fieldid2, ...) or None in case of failure
 |
 |  GetListGroup(self, userName=None, password=None)
 |      GetListGroup retrieves a list of access control groups.
 |
 |      GetListGroup retrieves a list of access control groups on the specified server.
 |      You can retrieve all groups or limit the list to groups associated with a particular user.
 |      Input: (optional) userName
 |             (optional) password
 |      Output: python dictionary of {groupid: (cars.AR_GROUP_TYPE, # read or change
 |                  (list of names),
 |                  AR_GROUP_CATEGORY)} # regular, dynamic or computed
 |
 |  GetListLicense(self, licenseType=None)
 |      GetListLicense return a list of entries from the license file.
 |
 |      GetListLicense return a list of entries from the license file.
 |      Input: (optional) licenseType (str, default: None)
 |      Output: ARLicenseInfoList or None in case of failure
 |
 |  GetListSQL(self, sqlCommand, maxRetrieve=0)
 |      GetListSQL retrieves a list of rows from the underlying
 |      SQL database on the specified server.
 |
 |      Input: sqlCommand
 |             maxRetrieve
 |      Output: a tuple of (line1, line2, line3, ...) with line being a tuple of
 |              the columns (col1, col2, col3, ...)
 |
 |  GetListServer(self)
 |      GetListServer retrieve the list of available AR System servers.
 |
 |      GetListServer retrieves the list of available AR System servers.
 |      Input:
 |      Output: (name1, name2, ...) or None in case of failure
 |
 |  GetListSupportFile(self, fileType, name, id2=0, changedSince=0)
 |      GetListSupportFile retrieves a list of support file IDs for a specified type of object.
 |
 |      GetListSupportFile retrieves a list of support file IDs for a specified type of object.
 |      Input:
 |             fileType
 |             name
 |             id2
 |             changedSince
 |      Output: fileIdList
 |
 |  GetListUser(self, userListType=2, changedSince=0)
 |      GetListUser retrieves a list of users.
 |
 |      GetListUser retrieves a list of users. You can retrieve information about the
 |      current user, all registered users, or all users currently accessing the server.
 |      Input: userListType (default: AR_USER_LIST_CURRENT)
 |             changedSince (default: 0)
 |      Output: ARUserInfoList
 |
 |  GetListVUI(self, schema, changedSince=0)
 |      Input: schema
 |             changedSince
 |      Output: idList
 |
 |  GetLocalizedValue(self, localizedRequest)
 |      Input:  localizedRequest
 |      Output: a tuple of (localizedValue, timestamp)
 |
 |  GetMultipleCurrencyRatioSets(self, ratioTimestamps=None)
 |      GetMultipleCurrencyRatioSets retrieves a list of formatted currency ratio sets
 |      valid for the times specified in the ratioTimestamps argument.
 |
 |      GetMultipleCurrencyRatioSets retrieves a list of formatted currency ratio sets
 |      valid for the times specified in the ratioTimestamps argument. You can use
 |      ARGetCurrencyRatio to extract a specific currency ratio from a ratio set that
 |      this call (ARGetMultipleCurrencyRatioSets) returns.
 |      Input:  ratioTimestamps
 |      Output: currencyRatioSets
 |
 |  GetMultipleEntries(self, schema, entryIdArray, idList=None)
 |      GetMultipleEntries retrieve a list of entries.
 |
 |      GetMultipleEntries retrieve a list of entries/objects for a
 |      specific schema according to an array of specific ids together
 |      with their fields and values.
 |
 |      Input: schema/form name
 |             entryIdArray: array of entry ids to be retrieved; this can either be
 |                 a pythonic array of entryids, or an AREntryListList (as returned
 |                 by ARGetListEntry) or an AREntryIdListList (as required by ARGetMultipleEntries)
 |             (optional) idList: an array of zero or more field IDs  to be retrieved, this can either
 |                 be a pythonic array of fieldIds or an ARInternalIdList
 |      Output: (ARBooleanList, ARFieldValueListList)
 |
 |  GetMultipleExtFieldCandidates(self, schema)
 |      GetMultipleExtFieldCandidates
 |
 |      Input:  schema
 |      Output: a tuple of (fieldMapping, limit, dataType)
 |
 |  GetMultipleLocalizedValues(self, localizedRequestList)
 |      GetMultipleLocalizedValues Retrieves multiple localized text strings
 |      from the BMC Remedy Message Catalog.
 |      The messages that the server retrieves depend on the user locale in the control
 |      structure. This function performs the same action as ARGetLocalizedValues but
 |      is easier to use and more efficient than retrieving multiple values one by one.
 |
 |      Input:  localizedRequestList (ARLocalizedRequestList)
 |      Output: tuple of (localizedValueList, timestampList) or None in case of failure
 |
 |  GetSchema(self, name)
 |      GetSchema returns all information about a schema and stores
 |      the information in the internal cache.
 |
 |      GetSchema returns all information about a schema.
 |      Input: string (schema)
 |      Output: (schema, groupList, admingrpList,
 |                      getListFields, sortList, indexList,
 |                      defaultVui, helpText, timestamp, owner,
 |                      lastChanged, changeDiary, objPropList)
 |      (example: to access the list of fields: use result[3])
 |
 |  GetServerInfo(self, requestArray=None)
 |      GetServerInfo retrieves the requested configuration information
 |      Input:  requestArray of integer (AR_SERVER_INFO_*)
 |      Output: dictionary {requestedInfoField: Value...}
 |
 |  GetServerStatistics(self, requestArray=None)
 |      GetServerStatistics returns server statistics.
 |
 |      GetServerStatistics retrieves server statistics ; we expect an array of
 |      AR_SERVER_STAT_ (c_uint) values, that this method converts into a
 |      ARServerInfoRequestList.
 |      Input: (optional) array of integer (AR_SERVER_STAT_*); if not given,
 |              will be replaced by all AR_SERVER_STAT_ entries
 |      Output: dictionary {requestedStatisticField: Value...}
 |
 |  GetSessionConfiguration(self, variableId)
 |      GetSessionConfiguration
 |
 |      Input:  variableId
 |      Output: ARValueStruct
 |
 |  GetSupportFile(self)
 |      GetSupportFile
 |
 |      Input:  context
 |
 |      Output:
 |
 |  GetTextForErrorMessage(self, msgId)
 |      GetTextForErrorMessage
 |
 |      Input:  msgId
 |      Output: String with the (localized) error message
 |
 |  GetVUI(self, schema, vuiId)
 |      GetVUI
 |
 |      Input:  schema: name of schema
 |              vuiId: internalId
 |      Output: ARVuiInfoStruct (or None in case of failure)
 |
 |  JulianDateToDate(self, jd)
 |      JulianDateToDate
 |
 |      Input:  jd
 |      Output: ARDateStruct
 |
 |  LoadARQualifierStruct(self, schema, qualString, displayTag=None)
 |      LoadARQualifierStruct
 |
 |      Input:  schema
 |              qualString: containing the qualification to load (following the syntax
 |                              rules for entering qualifications in the AR System Windows
 |                              User Tool query bar).
 |              displayTag: name of the form view (VUI) to use for resolving field names.
 |      Output: ARQualifierStruct
 |
 |  MergeEntry(self, schema, fieldList, mergeType=1)
 |      MergeEntry merges an existing database entry into the indicated form.
 |
 |      You can merge entries into base forms only. To add entries to join
 |      forms, merge them into one of the underlying base forms.
 |      Input:  schema (name of schema)
 |              fieldList (list or dictionary of {fieldid1: value1, ...}
 |              mergeType (default: cars.AR_MERGE_ENTRY_DUP_ERROR)
 |      Output: entryId (AREntryIdType) or raise ARError in case of failure
 |
 |  RegisterForAlerts(self, clientPort, registrationFlags=0)
 |      RegisterForAlerts registers the specified user with the AR System
 |      server to receive alerts.
 |
 |      Input:  clientPort
 |              registrationFlags (reserved for future use and should be set to zero)
 |      Output: errnr
 |
 |  SetEntry(self, schema, entryId, fieldList, getTime=0, option=None)
 |      SetEntry updates the form entry with the indicated ID on the
 |      specified server.
 |      Input:  schema
 |              entryId: entryId to be updated or for join forms: a list of tuples ((schema, entryid), ...)
 |              fieldList: a dict or a list of tuples: ((fieldid, value), (fieldid, value), ...)
 |              (optional) getTime (the server compares this value with the
 |                          value in the Modified Date core field to
 |                          determine whether the entry has been changed
 |                          since the last retrieval.)
 |              (optional) option (for join forms only; can be AR_JOIN_SETOPTION_NONE
 |                          or AR_JOIN_SETOPTION_REF)
 |      Output: errnr or raise ARError in case of failure
 |
 |  SetFullTextInfo(self, fullTextInfo)
 |      SetFullTextInfo updates the indicated FTS information
 |
 |      Note: Full text search (FTS) is documented for backward compatibility only,
 |      and is not supported in AR System 6.3.
 |      Input:  fullTextInfo
 |      Output: errnr
 |
 |  SetLogging(self, logTypeMask=0, whereToWriteMask=2, file_=None)
 |      SetLogging activates and deactivates client-side logging of server activity.
 |
 |      Input:  context
 |              (optional) logTypeMask:  what to log (default: nothing)
 |              (optional) whereToWriteMask: to log file or (default) status list
 |              (optional) file: FileHandle (default: None)
 |      Output: errnr
 |
 |  SetServerInfo(self, serverInfo)
 |      SetServerInfo updates the indicated configuration information for the specified server.
 |
 |      Input:  serverInfo (can be ARServerInfoList or a pythonic dictionary or list)
 |      Output: errnr
 |
 |  SetServerPort(self, server, port=0, rpcProgNum=0)
 |      SetServerPort specifies the port that your program will use to communicate with the
 |      AR System server and whether to use a private server.
 |
 |      Input:  server
 |              port
 |              rpcProgNum
 |      Output: errnr
 |
 |  SetSessionConfiguration(self, variableId, variableValue)
 |      SetSessionConfiguration sets an API session variable.
 |
 |      Input:  variableId,
 |              variableValue
 |      Output: errnr
 |
 |  SetSupportFile(self, fileType, name, id2, fileId, filePtr)
 |      SetSupportFile sets a support file in the AR System.
 |
 |      Input:  fileType,
 |              name,
 |              id2,
 |              fileId,
 |              filePtr
 |      Output: errnr
 |
 |  Signal(self, signalArray)
 |      Signal causes the server to reload information.
 |
 |      Input:  (ARSignalList) signalList
 |      Output: errnr
 |
 |  Termination(self)
 |      Termination performs environment-specific cleanup routines and disconnects
 |      from the specified Action Request System session.
 |
 |  ValidateFormCache(self, form, mostRecentActLink=0, mostRecentMenu=0, mostRecentGuide=0)
 |      ValidateFormCache
 |
 |      Input:  form
 |              (ARTimestamp) mostRecentActLink (optional, default = 0)
 |              (ARTimestamp) mostRecentMenu (optional, default = 0)
 |              (ARTimestamp) mostRecentGuide (optional, default = 0)
 |      Output: tuple of (formLastModified, numActLinkOnForm, numActLinkSince, menuSinceList
 |                  groupsLastChanged, userLastChanged, guideSinceList)
 |
 |  ValidateLicense(self, licenseType)
 |      ValidateLicense confirms whether the current server holds a valid license.
 |
 |      Input:  (ARLicenseNameType) licenseType
 |      Output: ARLicenseValidStruct (or None in case of failure)
 |
 |  ValidateMultipleLicenses(self, licenseTypeList)
 |      ValidateMultipleLicenses checks whether the current server holds a license for several specified license
 |      types. This function performs the same action as ARValidateLicense, but it is easier
 |      to use and more efficient than validating licenses one by one.
 |
 |      Input:  (ARLicenseNameList) licenseTypeList
 |      Output: ARLicenseValidList or None in case of failure
 |
 |  VerifyUser(self)
 |      VerifyUser checks the cache on the specified server
 |      to determine whether the specified user is registered
 |      with the current server. THe three boolean flags are
 |      ignored in this simplified version.
 |      Input:
 |      Output: tuple of (adminFlag, subAdminFlag, customFlag)
 |              or None in case of failure
 |
 |  __enter__(self)
 |
 |  __exit__(self, exc_type, exc_val, exc_tb)
 |
 |  __init__(self, server='', user='', password='', language='', authString='', tcpport=0, rpcnumber=0)
 |
 |  conv2ContainerTypeList(self, containerArray)
 |      take a list of containerTypes and return a ARContainerTypeList
 |
 |      Input: ARContainerTypeList, None, or integer or list of integers
 |      Output: ARContainerTypeList
 |                  if input is an integer, then the list contains just the integer
 |                  if input is None, then the list contains ARCON_ALL
 |                  otherwise, the ARContainerTypeList contains all the values
 |                  contained in the argument
 |
 |  conv2EntryIdList(self, schemaString, entry)
 |      conv2EntryIdList will try to create an AREntryIdList for either
 |      a simple schema/entryid or a joinform/joinentryid or
 |      joinform/list_of_entryids
 |      input: schemaString: name of schema
 |             entry: can be an integer or a string or a tuple/array/list
 |                  of (entryid1, entryid2)
 |      output: AREntryIdList
 |
 |  conv2EntryIdListList(self, schema, entryIdArray)
 |      take an array of entryids and convert them to a
 |      AREntryIdListList.
 |      Input: schema (not used any more)
 |             entryIdArray (pythonic list of entryids)
 |      Output: AREntryIdListList
 |
 |  conv2EntryListFieldList(self, fieldList, schema)
 |      conv2EntryListFieldList: take a tuple/array/list of
 |      (fieldId, column width, seperator)
 |      and return an AREntryListFieldList. This is useful
 |      to control the output of GetListEntry and others...
 |      future improvement: if columnwidth and/or seperator are not given,
 |      take the information from the schema...
 |
 |  conv2FieldValueList(self, schema, fieldList)
 |      conv2FieldValueList: take a dict or a tuple/array/list of (fieldId, value)
 |      and return an ARFieldValueList
 |      the schema used to be necessary as this function tried to get
 |      more detailed information about the fields.
 |      Special case attachment: (fieldId, (name, origSize, compSize, filename))
 |                   *please note* only filenames currently supported, no buffers!
 |      Special case coords: (fieldid, (numItems, x1, y1, x2, y2...))
 |
 |  conv2FullTextInfoRequestList(self, requestArray)
 |      conv2FullTextInfoRequestList: take a tuple/array/list of integers
 |      and return an ARFullTextInfoRequestList:
 |
 |      >>> res=ar.conv2FullTextInfoRequestList((1, 2, 3))
 |      >>> print res.numItems
 |      3
 |      >>> print res.requestList[2]
 |      3
 |
 |  conv2InternalIdList(self, idList)
 |      take an array of internal fieldids (or a single int)
 |      and return ARInternalIdList
 |
 |  conv2NameList(self, names)
 |      take a list of names and convert it to an ARNameList
 |
 |  conv2PermList(self, permArray)
 |      take a list of (groupid, permission) and turn it
 |      into an ARPermissionList
 |
 |  conv2QualifierStruct(self, schema, query, displayTag=None)
 |
 |  conv2ReferenceTypeList(self, refList)
 |      take list of reference types and return an ARReferenceTypeList
 |
 |  conv2ServerInfoList(self, serverInfoList)
 |
 |  conv2ServerInfoRequestList(self, requestArray)
 |      take a tuple of serverinforequests and return a ARServerInfoRequestList
 |
 |  conv2SortList(self, fieldList)
 |      conv2SortList: take a tuple/array/list of (fieldId, de/ascending)
 |      and return an ARSortList; ascending is 1 (or string beginning with 'a'),
 |      descending is 2 (or string beginning with 'd').
 |      default is ascending order.
 |
 |  conv2StructItemList(self, itemArray)
 |      conv2StructItemList takes a list of ints and names and converts
 |      it into a ARStructItemList; currently the namelist (as the third entry)
 |      for selected elements is not supported
 |
 |  conv2TimestampList(self, ratioTimestamps)
 |      conv2TimestampList takes a list of ints and converts it
 |      into an ARTimestampList; if None is handed over, the default
 |      is to return a list with one entry of AR_CURRENT_CURRENCY_RATIOS.
 |
 |  conv2ValueStruct(self, valueStruct, value, dataType=None)
 |      take a value and set the members of valueStruct according to
 |      dataType
 |      Input: valueStruct (ARValueStruct that will be modified inplace)
 |              value (the actual value)
 |              (optional) dataType (the dataType to be used)
 |      Output: none
 |
 |  convAccessNameList2List(self, obj)
 |
 |  convBooleanList2List(self, booleanList)
 |
 |  convDispInstList2Dict(self, dispInstList)
 |      droppes the common properties and returns as a dict
 |      the VUIds, with the display property lists as dicts
 |      for each VUI
 |
 |  convEntryIdList2String(self, entryId)
 |      we received an AREntryIdList (e.g. from GetListEntry) for
 |      a single entry (e.g. in a join form) and need this to be
 |      flatened out in a string
 |
 |  convEntryIdListList2List(self, obj)
 |      if you want to convert an AREntryIdListList (e.g. from ARGetListEntry) for
 |      multiple entries into a pythonic list of entryid strings.
 |
 |  convEntryListFieldValueList2Dict(self, obj)
 |      take an AREntryListFieldValueList (e.g. result of
 |      GetListEntryWithFields) and return a dictionary:
 |          {entryid1: {fid1: value, fid2: value...}, entryid2: ....}
 |
 |  convEntryListFieldValueList2List(self, obj)
 |      take an AREntryListFieldValueList (e.g. result of
 |      GetListEntryWithFields) and return a list:
 |          ((entryid1, {fid1: value, fid2: value...}), (entryid2, {}),  ....)
 |
 |  convEntryListFieldValueList2StringDict(self, obj)
 |      take an AREntryListFieldValueList (e.g. result of
 |      GetListEntryWithFields) and return a dictionary:
 |          {entryid1: {"fid1": value, "fid2": value...}, entryid2: ....}
 |
 |  convEntryListFieldValueStruct2List(self, obj)
 |      take an AREntryListFieldValueStruct and return
 |      [entryid, {fid1: value, fid2:value, ...}]
 |
 |  convEntryListFieldValueStruct2StringList(self, obj)
 |      take an AREntryListFieldValueStruct and return
 |      [entryid, {"fid1": value, "fid2":value, ...}]; the dict
 |      can be passed to a template string.
 |
 |  convEntryListList2Dict(self, obj)
 |      return a dictionary of {entryid: shortdesc, ....} (output of GetListEntry)
 |
 |  convEntryListList2EntryIdListList(self, obj)
 |      EntryListList is returned by GetListEntry, but GetMultipleEntries
 |      expects a EntryIdListList -- this function will convert it
 |
 |  convEntryListList2List(self, obj)
 |      return a list of (entryid, shortdesc) (output of GetListEntry)
 |
 |  convEnumLimitsStruct2Dict(self, eLS)
 |
 |  convEnumLimitsStruct2List(self, eLS)
 |      take an AREnumLimitsStruct and generate a python list out of it.
 |      ATTENTION: For AR_ENUM_STYLE_QUERY style EnumLimitsStruct, we should
 |          execute the query!
 |      Input: AREnumLimitsStruct
 |      Output: ('execute query on', queryList.server,
 |                          queryList.schema,
 |                          queryList.qualifier,
 |                          queryList.nameField,
 |                          queryList.numberField)
 |
 |  convFieldValueList2Dict(self, obj)
 |      take an ARFieldValueList and returns a dictionary of
 |      fieldid: value for all fieldids in the list
 |
 |  convFieldValueList2StringDict(self, obj)
 |      take an ARFieldValueList and returns a dictionary of
 |      str(fieldid): value for all fieldids in the list; this is
 |      especially useful in combination with string formatting, then
 |      you can have: 'value of fieldid: %(1)s' % dict
 |
 |  convFieldValueListList2List(self, obj)
 |      take an ARFieldValueListList and returns a list of
 |      [{fieldid: value for all fieldids in the list}]
 |
 |  convFieldValueStruct2List(self, obj)
 |      take an ARFieldValueStruct and return [fieldid, value]
 |
 |  convFieldValueStruct2StringList(self, obj)
 |      take an ARFieldValueStruct and return [str(fieldid), value]
 |
 |  convGroupInfoList2Dict(self, obj)
 |
 |  convGroupInfoStruct2List(self, obj)
 |
 |  convInternalIdList2List(self, idList)
 |
 |  convNameList2List(self, nameList)
 |      generate a python list out of an ARNameList
 |
 |  convObjectChangeTimestampList2List(self, obj)
 |
 |  convPermissionList2Dict(self, obj)
 |      convert a permissionList to a dictionary of [groupId: right]
 |
 |  convPropList2Dict(self, obj)
 |
 |  convServerInfoList2Dict(self, serverInfoList)
 |
 |  convServerInfoList2ExpDict(self, serverInfoList)
 |
 |  convServerInfoList2ExpList(self, serverInfoList)
 |      lookup the operation and return the string explanation for it; if the
 |      lookup fails for any value, we just return the list with the numerical values
 |
 |  convServerInfoList2List(self, serverInfoList)
 |
 |  convServerNameList2List(self, serverNameList)
 |
 |  convStatusHistoryList2List(self, statHistList)
 |
 |  convStatusHistoryStruct2List(self, statHist)
 |
 |  convUserInfoList2List(self, userInfoList)
 |      takes an ARUserInfoList and returns the following list:
 |      ((userName, (license, connectTime, lastAccessTime, defaultNotifier, email)), ...)
 |
 |  convUserInfoList2dict(self, userInfoList)
 |
 |  convUserLicenseList2list(self, userLicenseList)
 |
 |  convValueList2List(self, obj)
 |
 |  convValueListList2List(self, obj)
 |      a SQL command executed through ARSystem API returns a ValueListList. Per result line
 |      you get the values of the query. This function returns a pythonic list of lists.
 |
 |  convValueStruct2Value(self, obj)
 |
 |  errstr(self)
 |
 |  foo(self)
 |
 |  moo(self)
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from pyars.ars.ARS7603:
 |
 |  ARCommitTask(self, name)
 |      ARCommitTask: undocumented function
 |
 |      :param name: (ARNameType)
 |      :returns: errnr
 |
 |  ARCreateActiveLink(self, name, order, schemaList, groupList, executeMask, controlField=None, focusField=None, enable=True, query=None, actionList=None, elseList=None, helpText=None, owner=None, changeDiary=None, objPropList=None, errorActlinkOptions=None, errorActlinkName=None, objectModificationLogLabel=None)
 |      ARCreateActiveLink creates a new active link.
 |
 |      ARCreateActiveLink creates a new active link with the indicated name on the specified
 |      server. The active link is added to the server immediately and returned to
 |      users who request information about active links.
 |      Input: name (ARNameType)
 |             order (c_uint)
 |             schemaList (ARWorkflowConnectStruct)
 |             groupList (ARInternalIdList)
 |             executeMask (c_uint)
 |             (optional) controlField (ARInternalId, default = None)
 |             (optional) focusField (ARInternalId, default = None)
 |             (optional) enable (c_uint, default = None)
 |             (optional) query (ARQualifierStruct, default = None)
 |             (optional) actionList (ARActiveLinkActionList, default = None)
 |             (optional) elseList (ARActiveLinkActionList, default = None)
 |             (optional) helpText (c_char_p, default = None)
 |             (optional) owner (ARAccessNameType, default = None)
 |             (optional) changeDiary (c_char_p, default = None)
 |             (optional) objPropList (ARPropList, default = None)
 |             (optional) errorActlinkOptions (Reserved for future use. Set to NULL.)
 |             (optional) errorActlinkName (Reserved for future use. Set to NULL.)
 |             (optional) objectModificationLogLabel (c_char_p, default = None)
 |        :returns: errnr
 |
 |  ARCreateCharMenu(self, name, refreshCode, menuDefn, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      ARCreateCharMenu creates a new character menu.
 |
 |      ARCreateCharMenu creates a new character menu with the indicated name
 |      Input: name (ARNameType)
 |             refreshCode (c_uint)
 |             menuDef (ARCharMenuStruct)
 |             (optional) helpText (c_char_p, default = None)
 |             (optional) owner (ARAccessNameType, default = None)
 |             (optional) changeDiary (c_char_p, default = None)
 |             (optional) objPropList (ARPropList, default = None)
 |             (optional) objectModificationLogLabel (c_char_p, default = None)
 |        :returns: errnr
 |
 |  ARCreateContainer(self, name, groupList, admingrpList, ownerObjList, label, description, type_, references, removeFlag, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      ARCreateContainer creates a new container.
 |
 |      ARCreateContainer creates a new container with the indicated name. Use this
 |      function to create applications, active links, active link guides, filter
 |      guide, packing lists, guides, and AR System-defined container types.
 |      A container can also be a custom type that you define.
 |      Input: name
 |             groupList
 |             admingrpList
 |             ownerObjList
 |             label
 |             description
 |             type_
 |             references
 |             removeFlag
 |             helpText
 |             owner
 |             changeDiary
 |             objPropList
 |             (optional) objectModificationLogLabel (c_char_p, default = None)
 |        :returns: errnr
 |
 |  ARCreateEscalation(self, name, escalationTm, schemaList, enable, query=None, actionList=None, elseList=None, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      ARCreateEscalation creates a new escalation.
 |
 |      ARCreateEscalation creates a new escalation with the indicated name. The escalation condition
 |      is checked regularly based on the time structure defined when it is enabled.
 |      Input: name (ARNameType)
 |             escalationTm (AREscalationTmStruct)
 |             schemaList (ARWorkflowConnectStruct)
 |             enable (c_uint)
 |             (optional) query (ARQualifierStruct, default = None)
 |             (optional) actionList (ARFilterActionList, default = None)
 |             (optional) elseList (ARFilterActionList, default = None)
 |             (optional) helpText (c_char_p, default = None)
 |             (optional) owner (ARAccessNameType, default = None)
 |             (optional) changeDiary (c_char_p, default = None)
 |             (optional) objPropList (ARPropList, default = None)
 |             (optional) objectModificationLogLabel (c_char_p, default = None)
 |        :returns: errnr
 |
 |  ARCreateField(self, schema, fieldId, reservedIdOK, fieldName, fieldMap, dataType, option, createMode, fieldOption, defaultVal, permissions, limit=None, dInstanceList=None, helpText=None, owner=None, changeDiary=None, objPropList=None)
 |      ARCreateField creates a new field.
 |
 |      ARCreateField creates a new field with the indicated name on the specified server. Forms
 |      can contain data and nondata fields. Nondata fields serve several purposes.
 |      Trim fields enhance the appearance and usability of the form (for example,
 |      lines, boxes, or static text). Control fields provide mechanisms for executing
 |      active links (for example, menus, buttons, or toolbar buttons). Other
 |      nondata fields organize data for viewing (for example, pages and page
 |      holders) or show data from another form (for example, tables and columns).
 |      Input: schema (ARNameType)
 |              fieldId (ARInternalId)
 |              reservedIdOK (ARBoolean)
 |              fieldName (ARNameType)
 |              fieldMap (ARFieldMappingStruct)
 |              dataType (c_uint)
 |              option (c_uint)
 |              createMode (c_uint)
 |              fieldOption (c_uint)
 |              defaultVal (ARValueStruct)
 |              permissions (ARPermissionList)
 |              (optional) limit (ARFieldLimitStruct, default = None)
 |              (optional) dInstanceList (ARDisplayInstanceList, default = None)
 |              (optional) helpText (c_char_p, default = None)
 |              (optional) owner (ARAccessNameType, default = None)
 |              (optional) changeDiary (c_char_p, default = None)
 |              (optional) objPropList (ARPropList, default = None)
 |        :returns: fieldId (or None in case of failure)
 |
 |  ARCreateFilter(self, name, order, schemaList, opSet, enable, query, actionList, elseList=None, helpText=None, owner=None, changeDiary=None, objPropList=None, errorFilterOptions=0, errorFilterName=None, objectModificationLogLabel=None)
 |      ARCreateFilter creates a new filter.
 |
 |      ARCreateFilter creates a new filter with the indicated name on the specified
 |      server. The filter takes effect immediately and remains in effect until changed
 |      or deleted.
 |      Input: name,
 |             (unsigned int) order,
 |             (ARWorkflowConnectStruct) schemaList,
 |             (unsigned int) opSet,
 |             (unsigned int) enable,
 |             (ARQualifierStruct) query,
 |             (ARFilterActionList) actionList
 |             (ARFilterActionList) elseList  (optional, default = None)
 |             (char) helpText  (optional, default = None)
 |             (ARAccessNameType) owner  (optional, default = None)
 |             (char) changeDiary  (optional, default = None)
 |             (ARPropList) objPropList  (optional, default = None)
 |             (unsigned int) errorFilterOptions (optional, default = None)
 |             (ARNameType) errorFilterName (optional, default = None)
 |             (c_char) objectModificationLogLabel (optional, default = None)
 |        :returns: errnr
 |
 |  ARCreateImage(self, name, imageBuf, imageType, description=None, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      ARCreateImage creates a new image with the indicated name on the specified server
 |      Input: name (ARNameType)
 |             imageBuf (ARImageDataStruct)
 |             imageType (c_char_p, Valid values are: BMP, GIF, JPEG or JPG, and PNG.)
 |             (optional) description (c_char_p, default: None)
 |             (optional) helpText (c_char_p, default: None)
 |             (optional) owner (ARAccessNameType, default: None)
 |             (optional) changeDiary (c_char_p, default: None)
 |             (optional) objPropList (ARPropList, default: None)
 |             (c_char) objectModificationLogLabel (optional, default = None)
 |        :returns: errnr
 |
 |  ARCreateMultipleFields(self, schema, fieldIdList, reservedIdOKList, fieldNameList, fieldMapList, dataTypeList, optionList, createModeList, fieldOptionList, defaultValList, permissionListList, limitList=None, dInstanceListList=None, helpTextList=None, ownerList=None, changeDiaryList=None, objPropListList=None)
 |      ARCreateMultipleFields creates multiple fields in a form.
 |
 |      This function produces the same result as a
 |      sequence of ARCreateField calls to create the individual fields, but it can be more
 |      efficient. This function requires only one call from the client to the AR System
 |      server. The server can perform multiple database operations in a single transaction
 |      and avoid repeating operations such as those performed at the end of each
 |      individual call. If an error occurs creating an individual field, no fields are created.
 |      Input: ARNameType schema,
 |             (ARInternalIdList) fieldIdList,
 |             (ARBooleanList) reservedIdOKList
 |             (ARNamePtrList) fieldNameList,
 |             (ARFieldMappingList) fieldMapList,
 |             (ARUnsignedIntList) dataTypeList,
 |             (ARUnsignedIntList) optionList,
 |             (ARUnsignedIntList) createModeList,
 |             (ARUnsignedIntList) fieldOptionList,
 |             (ARValuePtrList) defaultValList,
 |             (ARPermissionListPtrList) permissionListList,
 |             (ARFieldLimitPtrList) limitList,
 |             (ARDisplayInstanceListPtrList) dInstanceListList,
 |             (ARTextStringList) helpTextList,
 |             (ARAccessNamePtrList) ownerList,
 |             (ARTextStringList) changeDiaryList
 |             (ARPropListList) objPropListList
 |        :returns: errnr
 |
 |  ARCreateSchema(self, name, schema, schemaInheritanceList, groupList, admingrpList, getListFields, sortList, indexList, archiveInfo, auditInfo, defaultVui, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      ARCreateSchema creates a new form.
 |
 |      ARCreateSchema creates a new form with the indicated name on the specified
 |      server. The nine required core fields are automatically associated with the
 |      new form.
 |      Input: (ARNameType) name of schema
 |             (ARCompoundSchema) schema,
 |             (ARSchemaInheritanceList) schemaInheritanceList (will be set to None, as it is reserved for future use),
 |             (ARPermissionList) groupList,
 |             (ARInternalIdList) admingrpList,
 |             (AREntryListFieldList) getListFields,
 |             (ARSortList) sortList,
 |             (ARIndexList) indexList,
 |             (ARArchiveInfoStruct) archiveInfo,
 |             (ARAuditInfoStruct) auditInfo,
 |             (ARNameType) defaultVui,
 |             (c_char_p) helpText (optional, default =None)
 |             (ARAccessNameType) owner (optional, default =None)
 |             (c_char_p) changeDiary (optional, default =None)
 |             (ARPropList) objPropList (optional, default =None)
 |             (c_char_p) objectModificationLogLabel (optional, default = None)
 |        :returns: errnr
 |
 |  ARCreateTask(self, name, chars=None, objProperties=None, versionControlList=None)
 |      ARCreateTask: undocumented function
 |
 |      Input: (ARNameType) name
 |             (c_char)  chars
 |             (ARPropList) objProperties
 |             (ARVercntlObjectList) versionControlList
 |        :returns: errnr
 |
 |  ARCreateVUI(self, schema, vuiId, vuiName, locale, vuiType=None, dPropList=None, helpText=None, owner=None, changeDiary=None, smObjProp=None)
 |      ARCreateVUI creates a new form view (VUI).
 |
 |      ARCreateVUI creates a new form view (VUI) with the indicated name on
 |      the specified server.
 |      Input: schema
 |             vuiId (can be 0 or a value between 536870912 and 2147483647)
 |             vuiName
 |             locale
 |             optional: vuiType (default = None)
 |             optional: dPropList (default = None)
 |             optional: helpText (default = None)
 |             optional: owner (default = None)
 |             optional: changeDiary (default = None)
 |             optional: smObjProp (default = None)
 |        :returns: vuiId (or None in case of failure)
 |
 |  ARDeleteActiveLink(self, name, deleteOption=0, objectModificationLogLabel=None)
 |      ARDeleteActiveLink deletes the active link.
 |
 |      ARDeleteActiveLink deletes the active link with the indicated name from the
 |      specified server and deletes any container references to the active link.
 |      Input: name
 |             (optional) deleteOption (default = cars.AR_DEFAULT_DELETE_OPTION)
 |             (optional) objectModificationLogLabel (c_char_p, default = None)
 |        :returns: errnr
 |
 |  ARDeleteCharMenu(self, name, deleteOption=0, objectModificationLogLabel=None)
 |      ARDeleteCharMenu deletes the character menu with the indicated name from
 |      the specified server.
 |
 |      Input: name
 |             (optional) deleteOption (default = cars.AR_DEFAULT_DELETE_OPTION)
 |             (optional) objectModificationLogLabel (c_char_p, default = None)
 |        :returns: errnr
 |
 |  ARDeleteContainer(self, name, deleteOption=0, objectModificationLogLabel=None)
 |      ARDeleteContainer deletes the container .
 |
 |      ARDeleteContainer deletes the container with the indicated name from
 |      the specified server and deletes any references to the container from other containers.
 |      Input: name
 |             (optional) deleteOption (default = cars.AR_DEFAULT_DELETE_OPTION)
 |             (optional) objectModificationLogLabel (default = None)
 |        :returns: errnr
 |
 |  ARDeleteEscalation(self, name, deleteOption=0, objectModificationLogLabel=None)
 |      ARDeleteEscalation deletes the escalation.
 |
 |      ARDeleteEscalation deletes the escalation with the indicated name from the
 |      specified server and deletes any container references to the escalation.
 |      Input:  name
 |             (optional) deleteOption (default = cars.AR_DEFAULT_DELETE_OPTION)
 |             (optional) objectModificationLogLabel (c_char_p, default = None)
 |        :returns: errnr
 |
 |  ARDeleteFilter(self, name, deleteOption=0, objectModificationLogLabel=None)
 |      ARDeleteFilter deletes the filter.
 |
 |      ARDeleteFilter deletes the filter with the indicated name from the
 |      specified server and deletes any container references to the filter.
 |      Input:  name
 |             (optional) deleteOption (default = cars.AR_DEFAULT_DELETE_OPTION)
 |             (c_char_p) objectModificationLogLabel (optional, default = None)
 |        :returns: errnr
 |
 |  ARDeleteImage(self, name, updateRef, objectModificationLogLabel=None)
 |      ARDeleteImage deletes the image with the indicated name from the specified server.
 |      Input: name (ARNameType)
 |             updateRef (ARBoolean, specify TRUE to remove all references to the image)
 |             (c_char_p) objectModificationLogLabel (optional, default = None)
 |        :returns: errnr
 |
 |  ARDeleteSchema(self, name, deleteOption=0, objectModificationLogLabel=None)
 |      ARDeleteSchema deletes the form.
 |
 |      ARDeleteSchema deletes the form with the indicated name from the
 |      specified server and deletes any container references to the form.
 |      Input: name
 |             deleteOption
 |             (c_char_p) objectModificationLogLabel (optional, default = None)
 |        :returns: errnr
 |
 |  ARDeleteTask(self, name)
 |      ARDeleteTask: undocumented function
 |
 |      Input: (ARNameType) name
 |        :returns: errnr
 |
 |  ARExport(self, structItems, displayTag=None, vuiType=1, exportOption=0, lockinfo=None)
 |      ARExport exports the indicated structure definitions.
 |
 |      Use this function to copy structure definitions from one AR System server to another.
 |      Note: Form exports do not work the same way with ARExport as they do in
 |      Remedy Administrator. Other than views, you cannot automatically
 |      export related items along with a form. You must explicitly specify the
 |      workflow items you want to export. Also, ARExport cannot export a form
 |      without embedding the server name in the export file (something you can
 |      do with the "Server-Independent" option in Remedy Administrator).
 |      Input: (ARStructItemList) structItems
 |             (ARNameType) displayTag (optional, default = None)
 |             (c_uint) vuiType (optional, default = cars.AR_VUI_TYPE_WINDOWS)
 |             (c_uint) exportOption (optional, default = cars.EXPORT_DEFAULT)
 |             (ARWorkflowLockStruct) lockinfo  (optional, default = None)
 |        :returns: string (or None in case of failure)
 |
 |  ARExportToFile(self, structItems, displayTag=None, vuiType=1, exportOption=0, lockinfo=None, filePtr=None)
 |      ARExportToFile exports the indicated structure definitions
 |      from the specified server to a file. Use this function to copy structure
 |      definitions from one AR System server to another.
 |      Input: (ARStructItemList) structItems
 |             (ARNameType)displayTag (optional, default = None)
 |             (c_uint) vuiType  (optional, default = AR_VUI_TYPE_WINDOWS)
 |             (c_uint) exportOption (optional, default = cars.EXPORT_DEFAULT)
 |             (ARWorkflowLockStruct) lockinfo  (optional, default = None)
 |             (FILE) filePtr  (optional, default = None, resulting in an error)
 |        :returns: errnr
 |
 |  ARGetActiveLink(self, name)
 |      ARGetActiveLink retrieves the active link with the indicated name.
 |
 |      ARGetActiveLink retrieves the active link with the indicated name on
 |      the specified server.
 |      Input: name (ARNameType)
 |        :returns: ARActiveLinkStruct (containing: order, schemaList,
 |                 groupList, executeMask, controlField,
 |                 focusField, enable, query, actionList,
 |                 elseList, helpText, timestamp, owner, lastChanged,
 |                 changeDiary, objPropList, errorActlinkOptions, errorActlinkName)
 |          or None in case of failure
 |
 |  ARGetContainer(self, name, refTypes=None)
 |      ARGetContainer retrieves the contents of the container.
 |
 |      It can return references of a single, specified type, of all types,
 |      or of an exclude reference type. The system returns information for
 |      accessible references and does nothing for references for which the user does
 |      not have access.
 |      Input: name
 |             (optional) refTypes (None)
 |        :returns: ARContainerStruct (groupList, admingrpList, ownerObjList, label, description,
 |      type,references,helpText,owner,timestamp,lastChanged,changeDiary,objPropList)
 |      or None in case of failure
 |
 |  ARGetField(self, schema, fieldId)
 |      ARGetField retrieves the information for one field on a form.
 |
 |      ARGetField returns a ARFieldInfoStruct filled for a given fieldid.
 |      Input: (ARNameType) schema
 |             (ARInternalId) fieldId
 |        :returns: ARFieldInfoStruct (or None in case of failure)
 |
 |  ARGetListEntryWithMultiSchemaFields(self, queryFromList, getListFields=None, qualifier=None, sortList=None, firstRetrieve=0, maxRetrieve=0, useLocale=False, groupBy=None, having=None, entryList=None)
 |      ARGetListEntryWithMultiSchemaFields performs dynamic joins by querying across multiple forms—including view and
 |      vendor forms—at run time.
 |      Input: queryFromList (ARMultiSchemaFuncQueryFromList)
 |             (optional) getListFields (ARMultiSchemaFieldFuncList, default = None),
 |             (optional) qualifier (ARMultiSchemaQualifierStruct, default = None),
 |             (optional) sortList (ARMultiSchemaSortList, default = None),
 |             (optional) firstRetrieve (c_uint, default=cars.AR_START_WITH_FIRST_ENTRY),
 |             (optional) maxRetrieve (c_uint, default=cars.AR_NO_MAX_LIST_RETRIEVE),
 |             (optional) useLocale (ARBoolean, default = False)
 |             (optional) groupBy (ARMultiSchemaFieldIdList, default = None)
 |             (optional) having (ARMultiSchemaFuncQualifierStruct, default = None)
 |             (optional) entryList (ARMultiSchemaFieldFuncValueListList, default = None)
 |        :returns: (ARMultiSchemaFieldValueListList, numMatches (c_uint))
 |
 |  ARGetListField(self, schema, changedSince=0, fieldType=1, objPropList=None)
 |      ARGetListField returns a list of field ids for a schema.
 |
 |      You can retrieve all fields or limit the list to fields of a particular type or fields
 |      modified after a specified time.
 |      Input: string: schema
 |             (optional) timestamp: changedSince (default: 0)
 |             (optional) fieldType (default: AR_FIELD_TYPE_DATA)
 |             (optional) objPropList (this extension is not documented in the 7.6 C API guide)
 |        :returns: ARInternalIdList (or None in case of failure)
 |
 |  ARGetListVUI(self, schema, changedSince=0, objPropList=None)
 |      ARGetListVUI retrieves a list of form views (VUI) for a particular form.
 |
 |      You can retrieve all views or limit the list to views modified after a
 |      specified time.
 |      Input: schema
 |             (optional) changedSince (ARTimestamp)
 |             (optional) objPropList (ARPropList)
 |        :returns: ARInternalIdList (or None in case of failure)
 |
 |  ARGetMultipleActiveLinks(self, changedSince=0, nameList=None, orderList=None, schemaList=None, assignedGroupListList=None, groupListList=None, executeMaskList=None, controlFieldList=None, focusFieldList=None, enableList=None, queryList=None, actionListList=None, elseListList=None, helpTextList=None, timestampList=None, ownersList=None, lastChangedList=None, changeDiaryList=None, objPropListList=None, errorActlinkOptionsList=None, errorActlinkNameList=None)
 |      ARGetMultipleActiveLinks retrieves multiple active link definitions.
 |
 |      This function performs the same
 |      action as ARGetActiveLink but is easier to use and more efficient than
 |      retrieving multiple entries one by one.
 |      Please note: While the ARSystem returns the information in lists for each item,
 |      pyars will convert this into an ARActiveLinkList of its own.
 |      Input: changedSince
 |               nameList (ARNameList)
 |               orderList (ARUnsignedIntList)
 |               schemaList (ARWorkflowConnectList)
 |               assignedGroupListList (ARInternalIdListList)
 |               groupListList (ARInternalIdListList)
 |               executeMaskList (ARUnsignedIntList)
 |               controlFieldList (ARInternalIdList)
 |               focusFieldList (ARInternalIdList)
 |               enableList (ARUnsignedIntList)
 |               queryList (ARQualifierList)
 |               actionListList (ARActiveLinkActionListList)
 |               elseListList (ARActiveLinkActionListList)
 |               helpTextList (ARTextStringList)
 |               timestampList (ARTimestampList)
 |               ownersList (ARAccessNameList)
 |               lastChangedList (ARAccessNameList)
 |               changeDiaryList (ARTextStringList)
 |               objPropListList (ARPropListList)
 |               errorActlinkOptionsList (ARUnsignedIntList)
 |               errorActlinkNameList (ARNameList)
 |        :returns: ARActiveLinkList (or None in case of failure)
 |
 |  ARGetMultipleContainers(self, changedSince=0, nameList=None, containerTypes=None, attributes=1024, ownerObjList=None, refTypes=None, containerNameList=None, assignedGroupListList=None, groupListList=None, admingrpListList=None, ownerObjListList=None, labelList=None, descriptionList=None, typeList=None, referenceList=None, helpTextList=None, ownerList=None, timestampList=None, lastChangedList=None, changeDiaryList=None, objPropListList=None)
 |      ARGetMultipleContainers retrieves multiple container objects.
 |
 |      While the server returns the information in lists for each item, pyars
 |      converts this to a struct of its own.
 |      Input: (optional) changedSince = 0,
 |             (optional) nameList = None,
 |             (optional) containerTypes = None,
 |             (optional) attributes = cars.AR_HIDDEN_INCREMENT,
 |             (optional) ownerObjList = None,
 |             (optional) refTypes = None,
 |             With the following parameters you define which information is returned
 |             (optional) containerNameList = None,
 |             (optional) assignedGroupListList = None
 |             (optional) groupListList = None,
 |             (optional) admingrpListList = None,
 |             (optional) ownerObjListList = None,
 |             (optional) labelList = None,
 |             (optional) descriptionList = None,
 |             (optional) typeList = None,
 |             (optional) referenceList = None,
 |             (optional) helpTextList = None,
 |             (optional) ownerList = None,
 |             (optional) timestampList = None,
 |             (optional) lastChangedList = None,
 |             (optional) changeDiaryList = None,
 |             (optional) objPropListList = None
 |        :returns: ARContainerList or None in case of failure
 |
 |  ARGetMultipleFields(self, schemaString, idList=None, fieldId2=None, fieldName=None, fieldMap=None, dataType=None, option=None, createMode=None, fieldOption=None, defaultVal=None, assignedGroupListList=None, permissions=None, limit=None, dInstanceList=None, helpText=None, timestamp=None, owner=None, lastChanged=None, changeDiary=None, objPropListList=None)
 |      ARGetMultipleFields returns a list of the fields and their attributes.
 |
 |      ARGetMultipleFields returns list of field definitions for a specified form.
 |      In contrast to the C APi this function constructs an ARFieldInfoList
 |      for the form and returns all information this way.
 |      Input: schemaString
 |            (ARInternalIdList) idList (optional; default: None) we currently
 |                    expect a real ARInternalIdList, because then it's very
 |                    easy to simply hand over the result of a GetListField
 |                    call
 |            (ARInternalIdList) fieldId2: although it is declared optional (to be consistent
 |                 with the AR API), this needs to be set (if not, this function will create
 |                 an ARInternalIdList) (see the output for an explanation)
 |            (ARNameList) fieldName
 |            (ARFieldMappingList) fieldMap
 |            (ARUnsignedIntList) dataType
 |            (ARUnsignedIntList) option
 |            (ARUnsignedIntList) createMode
 |            (ARUnsignedIntList) fieldOption
 |            (ARValueList) defaultVal
 |            (ARPermissionListList) assignedGroupListList
 |            (ARPermissionListList) permissions
 |            (ARFieldLimitList) limit
 |            (ARDisplayInstanceListList) dInstanceList
 |            (ARTextStringList) helpText
 |            (ARTimestampList) timestamp
 |            (ARAccessNameList) owner
 |            (ARAccessNameList) lastChanged
 |            (ARTextStringList) changeDiary either hand over None (as is
 |                    default) or supply according ARxxxxList for the
 |                    API call.
 |            (ARPropListList) objPropListList
 |        :returns: ARFieldInfoList; contains entries for all ids that you handed over;
 |             if a field could not be retrieved, the according fieldid will be None; that's
 |             the only way to decide if the list could be retrieved or not!
 |             (all input lists should contain the return values from the server, but we
 |              will also create an ARFieldInfoList) or None in case of failure
 |
 |  ARGetMultipleSchemas(self, changedSince=0, schemaTypeList=None, nameList=None, fieldIdList=None, schemaList=None, schemaInheritanceListList=None, assignedGroupListList=None, groupListList=None, admingrpListList=None, getListFieldsList=None, sortListList=None, indexListList=None, archiveInfoList=None, auditInfoList=None, defaultVuiList=None, helpTextList=None, timestampList=None, ownerList=None, lastChangedList=None, changeDiaryList=None, objPropListList=None)
 |      ARGetMultipleSchemas retrieves information about several schemas
 |      from the server at once.
 |
 |      This information does not include the form field definitions (see ARGetField). This
 |      function performs the same action as ARGetSchema but is easier to use and
 |      more efficient than retrieving multiple forms one by one.
 |      Information is returned in lists for each item, with one item in the list for
 |      each form returned. For example, if the second item in the list for existList is
 |      TRUE, the name of the second form is returned in the second item in the list
 |      for schemaNameList.
 |      Input:  (ARTimestamp) changedSince=0,
 |              (ARUnsignedIntList) schemaTypeList (optional, default = None),
 |              (ARNameList) nameList (optional, default = None),
 |              (ARInternalIdList) fieldIdList (optional, default =None),
 |              (ARCompoundSchemaList) schemaList (optional, default = None),
 |              (ARSchemaInheritanceListList) schemaInheritanceListList (optional, default  = None), # reserved for future use
 |              (ARPermissionListList) assignedGroupListList (optional, default  = None),
 |              (ARPermissionListList) groupListList (optional, default  = None),
 |              (ARInternalIdListList) admingrpListList (optional, default  = None),
 |              (AREntryListFieldListList) getListFieldsList (optional, default  = None),
 |              (ARSortListList) sortListList (optional, default  = None),
 |              (ARSortListList) indexListList (optional, default  = None),
 |              (ARSortListList) archiveInfoList (optional, default  = None),
 |              (ARAuditInfoList) auditInfoList (optional, default  = None),
 |              (ARNameList) defaultVuiList (optional, default  = None),
 |              (ARTextStringList) helpTextList (optional, default  = None),
 |              (ARTimestampList) timestampList (optional, default  = None),
 |              (ARAccessNameList) ownerList (optional, default  = None),
 |              (ARAccessNameList) lastChangedList (optional, default  = None),
 |              (ARTextStringList) changeDiaryList (optional, default  = None),
 |              (ARPropListList) objPropListList (optional, default = None)
 |        :returns: ARSchemaList or None in case of failure
 |
 |  ARGetMultipleVUIs(self, schema, wantList=None, changedSince=0, dPropListList=None, helpTextList=None, timeStampList=None, ownerList=None, lastChangedList=None, changeDiaryList=None, objPropListList=None)
 |      ARGetMultipleVUIs retrieves information about a group of form views
 |      (VUIs).
 |
 |      PLEASE NOTE: This function seems to have a bug in the Remedy DLLs. The symptoms
 |      are a mangeled localeList!!! Use with caution!
 |
 |      This function
 |      performs the same action as ARGetVUI but is easier to use and more efficient
 |      than retrieving multiple entries one by one.
 |      While the server returns information in lists for each item, pyars converts
 |      this into a struct of its own.
 |      Input:  schema
 |             optional: wantList (ARInternalIdList, default = None),
 |             optional: changedSince (default = 0)
 |             optional: dPropListList
 |             optional: helpTextList
 |             optional: timeStampList
 |             optional: ownerList
 |             optional: lastChangedList
 |             optional: changeDiaryList
 |             optional: objPropListList (ARPropListList)
 |        :returns: ARVuiInfoList or None in case of failure
 |
 |  ARGetSchema(self, name)
 |      ARGetSchema returns all information about a schema.
 |
 |      This information does not include the form's field
 |      definitions (see ARGetField).
 |      Input: (ARNameType) name
 |        :returns: ARSchema or None in case of failure
 |
 |  ARGetVUI(self, schema, vuiId)
 |      ARGetVUI retrieves information about the form view (VUI) with the indicated ID
 |
 |      Input:  schema: name of schema
 |              vuiId: internalId
 |        :returns: ARVuiInfoStruct (or None in case of failure)
 |
 |  ARImport(self, structItems, importBuf, importOption=0, objectModificationLogLabel=None)
 |      ARImport imports the indicated structure definitions to the specified server.
 |
 |      Use this function to copy structure definitions from one AR System server to another.
 |      Input:  structItems
 |              importBuf
 |              (optional) importOption (Default=cars.AR_IMPORT_OPT_CREATE)
 |              (optional) objectModificationLogLabel (c_char_p, default = None)
 |        :returns: errnr
 |
 |  ARRollbackTask(self, name)
 |      ARRollbackTask: undocumented function
 |
 |      :param name: (ARNameType)
 |      :returns: errnr
 |
 |  ARSetActiveLink(self, name, newName=None, order=None, workflowConnect=None, groupList=None, executeMask=None, controlField=None, focusField=None, enable=None, query=None, actionList=None, elseList=None, helpText=None, owner=None, changeDiary=None, objPropList=None, errorActlinkOptions=None, errorActlinkName=None, objectModificationLogLabel=None)
 |      ARSetActiveLink updates the active link.
 |
 |      The changes are added to the server immediately and returned to users who
 |      request information about active links. Because active links operate on
 |      clients, individual clients do not receive the updated definition until they
 |      reconnect to the form (thus reloading the form from the server).
 |      Input:  name (ARNameType),
 |              (optional) newName (ARNameType, default = None)
 |              (optional) order (c_uint, default = None)
 |              (optional) workflowConnect (ARWorkflowConnectStruct, default = None)
 |              (optional) groupList (ARInternalIdList, default = None)
 |              (optional) executeMask (c_uint, default = None)
 |              (optional) controlField (ARInternalId, default = None)
 |              (optional) focusField (ARInternalId, default = None)
 |              (optional) enable (c_uint, default = None)
 |              (optional) query (ARQualifierStruct, default = None)
 |              (optional) actionList (ARActiveLinkActionList, default = None)
 |              (optional) elseList (ARActiveLinkActionList, default = None)
 |              (optional) helpText (c_char_p, default = None)
 |              (optional) ARAccessNameType (ARNameType, default = None)
 |              (optional) changeDiary (c_char_p, default = None)
 |              (optional) objPropList (ARPropList, default = None)
 |              (optional) errorActlinkOptions (c_uint, default = None)
 |              (optional) errorActlinkName (ARNameType, default = None)
 |              (optional) objectModificationLogLabel (c_char_p, default = None)
 |        :returns: errnr
 |
 |  ARSetCharMenu(self, name, newName=None, refreshCode=None, menuDefn=None, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      ARSetCharMenu updates the character menu.
 |
 |      The changes are added to the server immediately and returned to users who
 |      request information about character menus. Because character menus
 |      operate on clients, individual clients do not receive the updated definition
 |      until they reconnect to the form (thus reloading the form from the server).
 |      Input:  name,
 |              (optional) newName,
 |              (optional) refreshCode,
 |              (optional) menuDefn,
 |              (optional) helpText,
 |              (optional) owner,
 |              (optional) changeDiary,
 |              (optional) objPropList
 |              (optional) objectModificationLogLabel
 |        :returns: errnr
 |
 |  ARSetContainer(self, name, newName=None, groupList=None, admingrpList=None, ownerObjList=None, label=None, description=None, type_=None, references=None, removeFlag=None, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      ARSetContainer updates the definition for the container.
 |
 |      Input:  name
 |             (optional) newName (default = None)
 |             (optional) groupList (default = None)
 |             (optional) admingrpList (default = None)
 |             (optional) ownerObjList (default = None)
 |             (optional) label (default = None)
 |             (optional) description (default = None)
 |             (optional) type (default = None)
 |             (optional) references (default = None)
 |             (optional) removeFlag (default = None)
 |             (optional) helpText (default = None)
 |             (optional) owner (default = None)
 |             (optional) changeDiary (default = None)
 |             (optional) objPropList (default = None)
 |             (optional) objectModificationLogLabel (default = None)
 |        :returns: errnr
 |
 |  ARSetEscalation(self, name, newName=None, escalationTm=None, schemaList=None, enable=None, query=None, actionList=None, elseList=None, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      ARSetEscalation updates the escalation.
 |
 |      The changes are added to the server immediately and returned to users who
 |      request information about escalations.
 |      Input:  (ARNameType) name,
 |              (ARNameType) newName,
 |             (AREscalationTmStruct) escalationTm,
 |             (ARWorkflowConnectStruct) schemaList,
 |             (c_uint) enable,
 |             (ARQualifierStruct) query,
 |             (ARFilterActionList) actionList,
 |             (ARFilterActionList) elseList,
 |             (c_char_p) helpText,
 |             (ARAccessNameType) owner,
 |             (c_char_p) changeDiary,
 |             (ARPropList) objPropList
 |             (c_char_p) objectModificationLogLabel
 |        :returns: errnr
 |
 |  ARSetField(self, schema, fieldId, fieldName=None, fieldMap=None, option=None, createMode=None, fieldOption=None, defaultVal=None, permissions=None, limit=None, dInstanceList=None, helpText=None, owner=None, changeDiary=None, setFieldOptions=0, objPropList=None)
 |      ARSetField updates the definition for the form field.
 |
 |      arextern.h says the new attribute fieldOption is handed over
 |      to the server as the second to last argument, whereas the
 |      pdf file claims it comes before defaultVal. I'll trust the .h
 |      file more for now...
 |
 |      Input: schema,
 |             fieldId,
 |             fieldName = None,
 |             fieldMap = None,
 |             option = None,
 |             createMode = None,
 |             fieldOption = None,
 |             defaultVal = None,
 |             permissions = None,
 |             limit = None,
 |             dInstanceList = None,
 |             helpText = None,
 |             owner = None,
 |             changeDiary = None
 |             setFieldOptions = 0
 |             objPropList = None
 |        :returns: errnr
 |
 |  ARSetFilter(self, name, newName=None, order=None, workflowConnect=None, opSet=None, enable=None, query=None, actionList=None, elseList=None, helpText=None, owner=None, changeDiary=None, objPropList=None, errorFilterOptions=None, errorFilterName=None, objectModificationLogLabel=None)
 |      ARSetFilter updates the filter.
 |
 |      The changes are added to the server immediately and returned to users who
 |      request information about filters.
 |      Input:  name,
 |              (ARNameType) newName,
 |              (c_uint) order (optional, default = None),
 |              (ARWorkflowConnectStruct) workflowConnect (optional, default = None),
 |              (c_uint) opSet (optional, default = None),
 |              (c_uint) enable (optional, default = None),
 |              (ARQualifierStruct) query (optional, default = None),
 |              (ARFilterActionList) actionList (optional, default = None),
 |              (ARFilterActionList) elseList (optional, default = None),
 |              (c_char) helpText (optional, default = None),
 |              (ARAccessNameType) owner (optional, default = None),
 |              (c_char) changeDiary (optional, default = None),
 |              (ARPropList) objPropList (optional, default = None),
 |              (c_uint) errorFilterOptions  (optional, default = None),
 |              (ARNameType) errorFilterName  (optional, default = None)
 |              (c_char) objectModificationLogLabel (optional, default = None)
 |        :returns: errnr
 |
 |  ARSetGetEntry(self, schema, entryIdList, fieldList, getTime=0, option=None, idList=None)
 |      ARSetGetEntry bundles the following API calls into one call:
 |      ARSetEntry and ARGetEntry
 |
 |      Please note: self.arsl will be set to the geStatus list!
 |      Input:  schema
 |              entryId: AREntryIdList
 |              fieldList: ARFieldValueList
 |              (optional) getTime (the server compares this value with the
 |                          value in the Modified Date core field to
 |                          determine whether the entry has been changed
 |                          since the last retrieval.)
 |              (optional) option (for join forms only; can be AR_JOIN_SETOPTION_NONE
 |                          or AR_JOIN_SETOPTION_REF)
 |              (optional) idList (ARInternalIdList)
 |        :returns: (getFieldList, seStatus, geStatus) or None in case of Failure
 |
 |  ARSetImage(self, name, newName=None, imageBuf=None, imageType=None, description=None, helpText=None, owner=None, changeDiary=None, objPropList=None, objectModificationLogLabel=None)
 |      ARSetImage updates the image with the indicated name on the specified server. After the
 |      image is updated, the server updates all references and object property timestamps
 |      for schemas affected by the change.
 |      Input: name (ARNameType)
 |             newName (ARNameType, default = None)
 |             imageBuf (ARImageDataStruct, default = None)
 |             imageType (c_char_p, default = None)
 |             description (c_char_p, default= None)
 |             helpText (c_char_p, default = None)
 |             owner (ARAccessNameType, dfault = None)
 |             changeDiary (c_char_p, default = None)
 |             objPropList (ARPropList, default = None)
 |             (c_char) objectModificationLogLabel (optional, default = None)
 |        :returns: errnr
 |
 |  ARSetMultipleFields(self, schema, fieldIdList, fieldNameList=None, fieldMapList=None, optionList=None, createModeList=None, fieldOptionList=None, defaultValList=None, permissionListList=None, limitList=None, dInstanceListList=None, helpTextList=None, ownerList=None, changeDiaryList=None, setFieldOptionList=None, objPropListList=None, setFieldStatusList=None)
 |      ARSetMultipleFields updates the definition for a list of fields
 |      with the specified IDs on the specified form on the specified server.
 |
 |      This call produces the same result as a sequence of
 |      ARSetField calls to update the individual fields, but it can be more efficient
 |      because it requires only one call from the client to the AR System server and
 |      because the server can perform multiple database operations in a single
 |      transaction and avoid repeating operations such as those performed at the end of
 |      each individual call.
 |      Input:  (ARNameType) schema (optional, default = None),
 |              (ARInternalIdList) fieldIdList (optional, default = None),
 |              (ARNamePtrList) fieldNameList (optional, default = None),
 |              (ARFieldMappingPtrList) fieldMapList (optional, default = None),
 |              (ARUnsignedIntList) optionList (optional, default = None),
 |              (ARUnsignedIntList) createModeList (optional, default = None),
 |              (ARUnsignedIntList) fieldOptionList (optional, default = None),
 |              (ARValuePtrList) defaultValList (optional, default = None),
 |              (ARPermissionListPtrList) permissionListList (optional, default = None),
 |              (ARFieldLimitPtrList) limitList (optional, default = None),
 |              (ARDisplayInstanceListPtrList) dInstanceListList (optional, default = None),
 |              (ARTextStringList) helpTextList (optional, default = None),
 |              (ARAccessNamePtrList) ownerList (optional, default = None),
 |              (ARTextStringList) changeDiaryList (optional, default = None),
 |              (ARUnsignedIntList) setFieldOptionList (optional, default = None),
 |              (ARPropListList) objPropListList (optional, default = None)
 |              (ARStatusListList) setFieldStatusList (optional, default = None)
 |        :returns: errnr
 |
 |  ARSetSchema(self, name, newName=None, schema=None, schemaInheritanceList=None, groupList=None, admingrpList=None, getListFields=None, sortList=None, indexList=None, archiveInfo=None, auditInfo=None, defaultVui=None, helpText=None, owner=None, changeDiary=None, objPropList=None, setOption=None, objectModificationLogLabel=None)
 |      ARSetSchema updates the definition for the form.
 |
 |      If the schema is locked, only the indexList and the defaultVui can be set.
 |      Input:  (ARNameType) name,
 |              (ARNameType) newName (optional, default = None),
 |              (ARCompoundSchema) schema (optional, default = None),
 |              (ARSchemaInterheritanceList) schemaInheritanceList (optional, default = None),
 |              (ARPermissionList) groupList (optional, default = None),
 |              (ARInternalIdList) admingrpList (optional, default = None),
 |              (AREntryListFieldList) getListFields (optional, default = None),
 |              (ARSortList) sortList (optional, default = None),
 |              (ARIndexList) indexList (optional, default = None),
 |              (ARArchiveInfoStruct) archiveInfo (optional, default = None),
 |              (ARAuditInfoStruct) auditInfo (optional, default = None),
 |              (ARNameType) defaultVui (optional, default = None),
 |              (c_char_p) helpText (optional, default = None),
 |              (ARAccessNameType) owner (optional, default = None),
 |              (c_char_p) changeDiary (optional, default = None),
 |              (c_uint) objPropList (optional, default = None),
 |              (c_uint) setOption (optional, default = None)
 |              (c_char_p) objectModificationLogLabel (optional, default = None)
 |        :returns: errnr
 |
 |  ARSetTask(self, name, newName, chars=None, owner=None, objProperties=None)
 |      ARSetTask: undocumented function
 |
 |      Input: (ARNameType) name
 |             (ARNameType) newName
 |             (c_char)  chars
 |             (ARAccessNameType) owner
 |             (ARPropList) objProperties
 |        :returns: errnr
 |
 |  ARSetVUI(self, schema, vuiId, vuiName=None, locale=None, vuiType=None, dPropList=None, helpText=None, owner=None, changeDiary=None, smObjProp=None)
 |      ARSetVUI updates the form view (VUI).
 |
 |      Input: schema,
 |             vuiId,
 |             (optional) vuiName = None,
 |             (optional) locale = None,
 |             (optional) vuiType=None,
 |             (optional) dPropList=None,
 |             (optional) helpText=None,
 |             (optional) owner=None,
 |             (optional) changeDiary=None
 |             (optional) smObjProp=None
 |        :returns: errnr
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from pyars.ars.ARS75:
 |
 |  ARGetActiveLinkFromXML(self, parsedStream, activeLinkName, appBlockName=None)
 |      ARGetActiveLinkFromXML retrieves an active link from an XML document.
 |
 |      Input: parsedStream
 |             activeLinkName
 |             appBlockName
 |        :returns: (ARActiveLinkStruct, supportFileList, arDocVersion) or
 |          None in case of failure
 |
 |  ARGetCacheEvent(self, eventIdList, returnOption=0)
 |      ARGetCacheEvent retrieves the list of events that occurred in the
 |      AR System server cache and the number of server caches, and indicates when
 |      administrative operations become public. You can direct this API call to either
 |      return the results immediately or when the next event occurs. This call is useful
 |      for detecting cache events in production cache mode.
 |      In developer cache mode, the call always returns immediately regardless of the
 |      value of the return option. In developer cache mode, there can only ever be one
 |      copy of the cache and it is always public.
 |      Input: eventIdList (ARInternalIdList)
 |             (optional) returnOption (c_uint, default = 0, call returns the information immediately)
 |        :returns: (eventIdOccuredList (ARInternalIdList), cacheCount (c_uint)) or
 |              (None, errnr) in case of failure
 |
 |  ARGetDSOPoolFromXML(self, parsedStream, poolName, appBlockName)
 |      ARGetDSOPoolFromXML retrieves information about a DSO pool from a
 |      definition in an XML document.
 |      Input: parsedStream (ARXMLParsedStream)
 |             poolName (ARNameType)
 |             appBlockName (ARNameType)
 |        :returns: (enabled (c_uint),
 |          defaultPool (c_uint),
 |          threadCount (c_long),
 |          connection (c_char_p),
 |          polling (c_uint),
 |          pollingInterval (c_uint),
 |          owner (ARAccessNameType),
 |          lastModifiedBy (ARAccessNameType),
 |          modifiedDate (ARTimestamp),
 |          helpText (c_char_p),
 |          changeHistory (c_char_p),
 |          objPropList (ARPropList),
 |          arDocVersion (c_uint)) or None in case of failure
 |
 |  ARGetImage(self, name)
 |      ARGetImage retrieves information about the specified image from
 |      the specified server.
 |      Input: name (ARNameType)
 |        :returns: (content (ARImageDataStruct),
 |          imageType (c_char_p),
 |          timestamp (ARTimeStamp),
 |          checkSum (c_char_p),
 |          description (c_char_p),
 |          helpText (c_char_p),
 |          owner (ARAccessNameType),
 |          changeDiary (c_char_p),
 |          objPropList (ARPropList)) or None in case of failure
 |
 |  ARGetImageFromXML(self, parsedStream, imageName, appBlockName)
 |      ARGetImageFromXML retrieves information about an image from an XML
 |      document.
 |      Input: parsedStream (ARXMLParsedStream)
 |             imageName (ARNameType)
 |             appBlockName (ARNameType)
 |        :returns: (imageType (c_char_p),
 |              contentLength (c_uint),
 |              checksum (c_char_p),
 |              timestamp (ARTimestamp),
 |              description (c_char_p),
 |              owner (ARAccessNameType),
 |              lastModifiedBy (ARAccessNameType),
 |              helpText (c_char_p),
 |              changeHistory (c_char_p),
 |              objPropList (ARPropList),
 |              imageCon (c_char_p)) or None in case of failure
 |
 |  ARGetListImage(self, schemaList=None, changedSince=0, imageType=None)
 |      ARGetListImage retrieves a list of image names from the specified
 |      server. You can retrieve all images or limit the list to those images associated
 |      with particular schemas, those modified after a specified time, and those of a
 |      specific type.
 |      Input: (optional) schemaList (ARNameList, default = None),
 |             (optional) changedSince (ARTimestamp, default = 0),
 |             (optional) imageType (c_char_p, default = None)
 |        :returns: imageList (ARNameList) or None in case of failure
 |
 |  ARGetMultipleImages(self, changedSince=0, nameList=None, imageTypeList=None, timestampList=None, descriptionList=<pyars._cars7604.ARTextStringList object>, helpTextList=None, ownerList=None, lastChangedList=None, changeDiaryList=None, objPropListList=None, checkSumList=None, imageDataList=None)
 |      ARGetMultipleImages retrieves information from the specified server
 |      about the images whose names are specified in the nameList parameter. This function
 |      performs the same action as ARGetImage, but it is more efficient than retrieving
 |      information about multiple images one by one.
 |      Input: (optional) changedSince (ARTimestamp, default = 0),
 |             (optional) nameList (ARNameList, default = None)
 |             (optional) imageTypeList (ARTextStringList, default = None)
 |             (optional) timestampList (ARTimestampList, default = None)
 |             (optional) descriptionList (ARTextStringList, default = None)
 |             (optional) helpTextList (ARTextStringList, default = None)
 |             (optional) ownerList (ARAccessNameList, default = None)
 |             (optional) lastChangedList (ARAccessNameList, default = None)
 |             (optional) changeDiaryList (ARTextStringList, default = None)
 |             (optional) objPropListList (ARPropListList, default = None)
 |             (optional) checkSumList (ARTextStringList, default = None)
 |             (optional) imageDataList (ARImageDataList, default = None)
 |        :returns: (existList, imageNameList, imageTypeList,  timestampList, descriptionList,
 |          helpTextList, ownerList, lastChangedList, changeDiaryList, objPropListList,
 |          checkSumList, imageDataList)
 |
 |  ARGetObjectChangeTimes(self)
 |      ARGetObjectChangeTimes retrieves timestamps for the last create,
 |      modify, and delete operations for each type of server object.
 |      Input:
 |        :returns: ARObjectChangeTimestampList or None in case of failure
 |
 |  ARGetOneEntryWithFields(self, schema, qualifier=None, getListFields=None, sortList=None, useLocale=False)
 |      ARGetOneEntryWithFields retrieves one entry from AR System matching a given qualification. Similar to
 |      ARGetListEntryWithFields, with the following behavioral changes:
 |      - If the qualifier in the API call matches multiple records, only the first is returned.
 |      - Get filters on the form being queried are fired for that one record.
 |      This function is equivalent to issuing an ARGetListEntry call followed by
 |      ARGetEntry with one of the entry IDs.
 |      The keyword $LASTCOUNT$ is set to the number of entries matched, even though
 |      only one is returned.
 |      Input: schema (ARNameType)
 |             (default) qualifier (ARQualifierStruct, default = None)
 |             (default) getListFields (AREntryListFieldList, default = None)
 |             (default) sortList (ARSortList, default = None)
 |             (default) useLocale (ARBoolean, default = False)
 |        :returns: (entryList (AREntryListFieldValueList), numMatches (c_uint))
 |
 |  ARRunEscalation(self, escalationName)
 |      ARRunEscalation runs the specified escalation immediately
 |      Input: escalationName (ARNameType)
 |        :returns: errnr
 |
 |  ARSetActiveLinkToXML(self, activeLinkName, xmlDocHdrFtrFlag=False, executionOrder=0, workflowConnect=None, accessList=None, executeOn=0, controlFieldID=0, focusFieldID=0, enabled=0, query=None, ifActionList=None, elseActionList=None, supportFileList=None, owner='', lastModifiedBy='', modifiedDate=0, helpText=None, changeHistory=None, objPropList=None, arDocVersion=c_ulong(0L), errorActlinkOptions=c_ulong(0L), errorActlinkName=None)
 |      ARSetActiveLinkToXML converts active links to XML.
 |
 |      Input: activeLinkName (ARNameType),
 |             (optional) xmlDocHdrFtrFlag (ARBoolean, default = False),
 |             (optional) executionOrder (c_uint, default = 0)
 |             (optional) workflowConnect (ARWorkflowConnectStruct, default = None),
 |             (optional) accessList (ARInternalIdList, default = None)
 |             (optional) executeOn (c_uint, default = 0)
 |             (optional) controlFieldID (ARInternalId, default = 0)
 |             (optional) focusFieldID (ARInternalId, default = 0)
 |             (optional) enabled (c_uint, default = 0)
 |             (optional) query (ARQualifierStruct, default = None)
 |             (optional) ifActionList (ARActiveLinkActionList, default = None)
 |             (optional) elseActionList (ARActiveLinkActionList, default = None)
 |             (optional) supportFileList (ARSupportFileInfoList, default = None)
 |             (optional) owner (ARAccessNameType, default = '')
 |             (optional) lastModifiedBy (ARAccessNameType, default = '')
 |             (optional) modifiedDate (ARTimestamp, default = 0)
 |             (optional) helpText (c_char_p, default = None)
 |             (optional) changeHistory (c_char_p, default = None)
 |             (optional) objPropList (ARPropList, default = None)
 |             (optional) arDocVersion (default = c_uint(0))
 |             (optional) errorActlinkOptions (c_uint, default = 0),
 |             (optional) errorActlinkName (ARNameType, default = None)
 |        :returns: string containing the XML
 |              or None in case of failure
 |
 |  ARSetDSOPoolToXML(self, poolName, xmlDocHdrFtrFlag=False, enabled=0, defaultPool=True, threadCount=0, connection=None, polling=c_ulong(0L), pollingInterval=c_ulong(0L), owner=None, lastModifiedBy=None, modifiedDate=0, helpText=None, changeHistory=None, objPropList=None, arDocVersion=c_ulong(0L))
 |      ARSetDSOPoolToXML retrieves information about the DSO pool.
 |
 |      Input:
 |        :returns: string containing the XML
 |              or None in case of failure
 |
 |  ARSetImageToXML(self, imageName, xmlDocHdrFtrFlag, imageType, description, owner, lastModifiedBy, helpText, changeHistory, objPropList, checksum, modifiedDate, imageContent)
 |      ARSetImageToXML saves information about an image to an XML document.
 |      Input: imageName (ARNameType)
 |             xmlDocHdrFtrFlag (ARBoolean)
 |             imageType (c_char_p)
 |             description (c_char_p)
 |             owner (ARAccessNameType)
 |             lastModifiedBy (ARAccessNameType)
 |             helpText (c_char_p)
 |             hangeHistory (c_char_p)
 |             objPropList (ARPropList)
 |             checksum (c_char)
 |             modifiedDate (ARTimestamp)
 |             imageContent (ARImageDataStruct)
 |        :returns: errnr
 |
 |  ARWfdClearAllBreakpoints(self)
 |      ARWfdClearAllBreakpoints removes all breakpoints from the server..
 |
 |      Input:
 |        :returns: errnr
 |
 |  ARWfdClearBreakpoint(self, bpId)
 |      ARWfdClearBreakpoint removes the specified breakpoint from the server.
 |
 |      Input: bpId (c_uint)
 |        :returns: errnr
 |
 |  ARWfdExecute(self, mode=0)
 |      Instructs the debug server to begin execution.
 |      Input: (optional) mode  (c_uint, default: single step)
 |        :returns: (result, extraInfo1, extraInfo2) or None in case of failure
 |
 |  ARWfdGetCurrentLocation(self, howFarBack=0)
 |      ARWfdGetCurrentLocation description Requests the current location
 |      of the worker thread during debugging.
 |      Input: (optional) howFarBack (c_uint, default = 0)
 |        :returns: location
 |
 |  ARWfdGetDebugMode(self)
 |      ARWfdGetDebugMode returns the current debug mode.
 |      Input:
 |        :returns: integer (current debug mode)
 |
 |  ARWfdGetFieldValues(self, howFarBack=0)
 |      ARWfdGetFieldValues requests the field-value list associated with
 |      the current schema at the current location.
 |      Input: (optional) howFarBack (c_uint, default = 0)
 |        :returns: (ARFieldValueList, ARFieldValueList) or None in case of failure
 |
 |  ARWfdGetFilterQual(self)
 |      ARWfdGetFilterQual requests the field-value list associated with
 |      the current schema at the current location.
 |      Input:
 |        :returns: filterQual (ARQualifierStruct)
 |
 |  ARWfdGetKeywordValue(self, keywordId)
 |      ARWfdGetKeywordValue retrieves the value of a keyword, if possible.
 |      Input: keywordId (c_uint)
 |        :returns: ARValueStruct
 |
 |  ARWfdGetUserContext(self, mask=0)
 |      ARWfdGetUserContext retrieves information associated with the workflow user.
 |      Input: mask (c_uint)
 |        :returns: ARWfdUserContext
 |
 |  ARWfdListBreakpoints(self)
 |      ARWfdListBreakpoints returns a list of server breakpoints.
 |      Input:
 |        :returns: ARWfdRmtBreakpointList (or None in case of failure)
 |
 |  ARWfdSetBreakpoint(self, inBp)
 |      ARWfdSetBreakpoint sets a breakpoint on the server, and overwrites
 |      if needed.
 |      Input: inBp (ARWfdRmtBreakpoint)
 |        :returns: errnr
 |
 |  ARWfdSetDebugMode(self, mode=0)
 |      ARWfdSetDebugMode sets a new debug mode.
 |      Input: (optional) mode (c_uint, default: WFD_EXECUTE_STEP)
 |        :returns: errnr
 |
 |  ARWfdSetFieldValues(self, trFieldList, dbFieldList)
 |      ARWfdSetFieldValues overwrites the field-value list associated
 |      with the current schema at the current location.
 |      Input: trFieldList (ARFieldValueList)
 |             dbFieldList (ARFieldValueList)
 |        :returns: errnr
 |
 |  ARWfdSetQualifierResult(self, result)
 |      ARWfdSetQualifierResult forces the qualifier result to the specified
 |      Boolean value.
 |      Input: result (ARBoolean)
 |        :returns: errnr
 |
 |  ARWfdTerminateAPI(self, errorCode)
 |      ARWfdTerminateAPI causes workflow to return with an optionally
 |      specified error at the next opportunity. If an error is not specified, a generic
 |      TERMINATED_BY_DEBUGGER error will be returned
 |      Input: errorCode (c_uint)
 |        :returns: errnr
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from pyars.ars.ARS71:
 |
 |  ARGetFilter(self, filter_)
 |      ARGetFilter retrieves a filter with a given name.
 |
 |      Input: filter name
 |        :returns: ARFilterStruct (order, schemaList, opSet, enable, query, actionList,
 |                 elseList, helpText, timestamp, owner, lastChanged,
 |                 changeDiary, objPropList, errorFilterOptions, errorFilterName) or
 |      None in case of failure
 |
 |  ARGetFilterFromXML(self, parsedStream, filterName)
 |      ARGetFilterFromXML retrieves a filter from an XML document.
 |
 |      Input: (ARXMLParsedStream) parsedStream
 |             (ARNameType) filterName
 |        :returns: (ARFilterStruct, arDocVersion)
 |              or None in case of failure
 |
 |  ARGetMultipleFilters(self, changedSince=0, nameList=None, orderList=None, workflowConnectList=None, opSetList=None, enableList=None, queryList=None, actionListList=None, elseListList=None, helpTextList=None, timestampList=None, ownerList=None, lastChangedList=None, changeDiaryList=None, objPropListList=None, errorFilterOptionsList=None, errorFilterNameList=None)
 |      ARGetMultipleFilters retrieves information about a group of filters.
 |
 |      This function performs the same
 |      action as ARGetFilter but is easier to use and more efficient than retrieving
 |      multiple entries one by one.
 |      While the server returns information in lists for each item, pyars converts
 |      this into a struct of its own.
 |      Input: changedSince (optional, default = 0),
 |               nameList (optional, default = None) (ARNameList)
 |               orderList (optional, default = None) (ARUnsignedIntList)
 |               workflowConnectList (optional, default = None) (ARWorkflowConnectList)
 |               opSetList (optional, default = None) (ARUnsignedIntList)
 |               enableList (optional, default = None) (ARUnsignedIntList)
 |               queryList (optional, default = None) (ARQualifierList)
 |               actionListList (optional, default = None) (ARFilterActionListList)
 |               elseListList (optional, default = None) (ARFilterActionListList)
 |               helpTextList (optional, default = None) (ARTextStringList)
 |               timestampList (optional, default = None) (ARTimestampList)
 |               ownerList (optional, default = None) (ARAccessNameList)
 |               lastChangedList (optional, default = None) (ARAccessNameList)
 |               changeDiaryList (optional, default = None) (ARTextStringList)
 |               objPropListList (optional, default = None) (ARPropListList)
 |               errorFilterOptionsList (optional, default = None) (ARUnsignedIntList)
 |               errorFilterNameList (optional, default = None) (ARNameList)
 |        :returns: ARFilterList or None in case of failure
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from pyars.ars.ARS70:
 |
 |  ARGetClientCharSet(self)
 |      ARGetClientCharSet retrieves a string that represents the name of the character set the client is
 |      using. The API assumes that all character data the client passes it is encoded
 |      in this character set, and returns all character data encoded in this character
 |      set.
 |      Use the ARControlStruct localeInfo.charSet field to set the client
 |      character set as described under ARInitialization().
 |
 |      Input:
 |        :returns: string or None in case of failure
 |
 |  ARGetFieldFromXML(self, parsedStream, fieldName)
 |      ARGetFieldFromXML retrieves a filter from an XML document.
 |
 |      Input: (ARXMLParsedStream) parsedStream
 |             (ARNameType) menuName
 |        :returns: (ARFieldInfoStruct, arDocVersion)
 |                  or None in case of failure
 |
 |  ARGetSchemaFromXML(self, parsedStream, schemaName)
 |      ARGetSchemaFromXML retrieves schemas from an XML document.
 |
 |      Input: (ARXMLParsedStream) parsedStream
 |             (ARNameType) schemaName
 |        :returns: (ARSchema,
 |              nextFieldID,
 |              coreVersion,
 |              upgradeVersion,
 |              fieldInfoList,
 |              vuiInfoList,
 |              arDocVersion)
 |              or None in case of failure
 |
 |  ARGetServerCharSet(self)
 |      ARGetServerCharSet retrieves a string that represents the name of the character set the API library
 |      uses to communicate with the server. If this differs from the client charset,
 |      the API will convert the data to the right character set.
 |
 |      Input:
 |        :returns: string or None in case of failure
 |
 |  ARServiceEntry(self, formName, entryIdList=None, fieldValueList=None, internalIdList=None)
 |      ARServiceEntry takes an entry ID with a list of input field values,
 |      executes filter workflow, and returns a list of output fields without
 |      writing the specified entry to the database. Thus, it eliminates the ARSetEntry
 |      call, ARGetEntry call, the ARDeleteEntry call, and several filters.
 |      This call can work with an AR System web service to obtain external services, or
 |      with a Set Fields filter action to consume an internal AR System service.
 |
 |      Input: (ARNameType) formName
 |              (AREntryIdList) entryIdList (optional, default = None)
 |              (ARFieldValueList) fieldValueList (optional, default = None)
 |              (ARInternalIdList) internalIdList (optional, default = None)
 |        :returns: ARFieldValueList or None in case of failure
 |
 |  ARSetFieldToXML(self, fieldName, xmlDocHdrFtrFlag=False, fieldID=0, fieldMapping=None, dataType=0, entryMode=0, createMode=0, fieldOption=0, defaultValue=None, permissionList=None, fieldLimit=None, dInstanceList=None, owner='', lastModifiedBy='', modifiedDate=0, helpText=None, changeHistory=None, arDocVersion=c_ulong(0L))
 |      ARSetFieldToXML converts a field to XML.
 |
 |      Input:
 |        :returns: string containing the XML
 |              or None in case of failure
 |
 |  ARSetImpersonatedUser(self, name)
 |      ARSetImpersonatedUser sets a user profile.
 |
 |      Enables plug-ins, the mid tier, and other programs (such as the Email
 |      Engine) to run as an administrator but to perform operations as a specific
 |      user (with the user's permissions and licensing in effect).
 |      Input: name (ARNameType)
 |        :returns: errnr
 |
 |  ARSetSchemaToXML(self, schemaName, xmlDocHdrFtrFlag=False, compoundSchema=None, permissionList=None, subAdminGrpList=None, getListFields=None, sortList=None, indexList=None, archiveInfo=None, auditInfo=None, defaultVui='', nextFieldID=0, coreVersion=0, upgradeVersion=0, fieldInfoList=None, vuiInfoList=None, owner='', lastModifiedBy='', modifiedDate=0, helpText='', changeHistory='', objPropList=None, arDocVersion=0)
 |      ARSetSchemaToXML dump Schema to XML according...
 |
 |      This function dumps a schema definition into a string in
 |      XML format; this implementation takes as  arguments the structs
 |      that drive the xml output.
 |      If you want the more convenient XML output, call ERSetSchemaToXML
 |      It is important to understand that this function is executed on the
 |      client side; in other words, the user is responsible for fetching
 |      all relevant information and handing it over to this function.
 |      This call really only transforms the information into XML.
 |      Input: context
 |             schemaName
 |             (optional) xmlDocHdrFtrFlag (default: 0)
 |             (optional) compoundSchema (default: None)
 |             (optional) permissionList (default: None)
 |             (optional) subAdminGrpList (default: None)
 |             (optional) getListFields (default: None)
 |             (optional) sortList (default: None)
 |             (optional) indexList (default: None)
 |             (optional) archiveInfo (default: None),
 |             (optional) auditInfo (default: None),
 |             (optional) defaultVui (default: None)
 |             (optional) nextFieldID (default: None)
 |             (optional) coreVersion (default: 0)
 |             (optional) upgradeVersion (default: 0)
 |             (optional) fieldInfoList (default: None)
 |             (optional) vuiInfoList (default: None)
 |             (optional) owner (default: '')
 |             (optional) lastModifiedBy (default: '')
 |             (optional) modifiedDate (default: 0)
 |             (optional) helpText (default: '')
 |             (optional) changeHistory (default: '')
 |             (optional) objPropList (default: None)
 |             (optional) arDocVersion (default: 0)
 |        :returns: string containing the XML (or None in case of failure)
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from pyars.ars.ARS63:
 |
 |  ARBeginBulkEntryTransaction(self)
 |      ARBeginBulkEntryTransaction marks the beginning of a series of
 |      entry API function calls.
 |
 |      Those function calls will be grouped together and sent
 |      to the AR System server as part of one transaction. All calls
 |      related to create, set, delete, and merge operations made between
 |      this API call and a trailing AREndBulkEntryTransaction call will
 |      not be sent to the server until the trailing call is made.
 |      Input:
 |        :returns: errnr
 |
 |  AREndBulkEntryTransaction(self, actionType=1)
 |      AREndBulkEntryTransaction marks the ending of a series of entry API function calls.
 |
 |      Those function calls
 |      are grouped together and sent to the AR System server as part
 |      of one transaction. All calls related to create, set, delete,
 |      and merge operations made before this API call and after the
 |      preceding ARBeginBulkEntryTransaction call will be sent to the
 |      server when this call is issued and executed within a single
 |      database transaction.
 |      Input: (optional) actionType (default = cars.AR_BULK_ENTRY_ACTION_SEND)
 |        :returns: bulkEntryReturnList
 |
 |  ARGetControlStructFields(self)
 |      ARGetControlStructFields returns the single pieces of the control record.
 |
 |      ARGetControlStructFields returns the single pieces of the control
 |      record. This method actually is not necessary in python, as we have
 |      direct access to the members of the struct; however to be
 |      compatible with arsjython and ARSPerl, we implement this method.
 |      Input:
 |        :returns: (cacheId, errnr, operationTime, user, password, localeInfo, ,
 |               sessionId, authString, server)
 |
 |  ARGetEntryBlock(self, entryBlockList, blockNumber=0)
 |      ARGetEntryBlock retrieves a list of entries contained in a block of entries
 |      retrieved using ARGetListEntryBlocks.
 |
 |      Input: entryBlockList
 |             (optional) blockNumber (default = 0)
 |        :returns: AREntryListFieldValueList or None in case of failure
 |
 |  ARGetListEntryBlocks(self, schema, qualifier=None, getListFields=None, sortList=None, numRowsPerBlock=50, firstRetrieve=0, maxRetrieve=0, useLocale=False)
 |      ARGetListEntryBlocks retrieves a list of blocks of entries.
 |
 |      Data is returned as a data structure,
 |      AREntryListBlock. Entries are encapsulated in the AREntryListBlock
 |      data structure and divided into blocks of entries. You call
 |      ARGetEntryBlock with a block number to return a list of entries for
 |      that block.
 |      Input:
 |        :returns: (entryBlockList (AREntryBlockList),
 |               numReturnedRows,
 |               numMatches) or None in case of failure
 |
 |  ARGetMultipleCharMenus(self, changedSince=0, nameList=None, refreshCodeList=None, menuDefnList=None, helpTextList=None, timestampList=None, ownerList=None, lastChangedList=None, changeDiaryList=None, objPropListList=None)
 |      ARGetMultipleCharMenus retrieves information about a group of
 |      character menus.
 |
 |      This function
 |      performs the same action as ARGetCharMenu but is easier to use and more
 |      efficient than retrieving multiple entries one by one.
 |      While the server returns information in lists for each item, pyars converts
 |      this into a struct of its own.
 |      Input: changedSince = 0,
 |             (optional) nameList = None,
 |             (optional) refreshCodeList = None,
 |             (optional) menuDefnList = None,
 |             (optional) helpTextList = None,
 |             (optional) timestampList = None,
 |             (optional) ownerList = None,
 |             (optional) lastChangedList = None,
 |             (optional) changeDiaryList = None,
 |             (optional) objPropListList = None
 |        :returns: ARMenuList or None in case of failure
 |
 |  ARGetMultipleEscalations(self, changedSince=0, nameList=None, esclTmList=None, workflowConnectList=None, enableList=None, queryList=None, actionListList=None, elseListList=None, helpTextList=None, timestampList=None, ownerList=None, lastChangedList=None, changeDiaryList=None, objPropListList=None)
 |      ARGetMultipleEscalations retrieves information about a group
 |      of escalations.
 |
 |      This function performs
 |      the same action as ARGetEscalation but is easier to use and more efficient than
 |      retrieving multiple entries one by one.
 |      While the server returns information in lists for each item, pyars converts
 |      this into a struct of its own.
 |      Input: changedSince = 0,
 |            nameList = None,
 |            esclTmList = None,
 |            workflowConnectList = None,
 |            enableList = None,
 |            queryList = None,
 |            actionListList = None,
 |            elseListList = None,
 |            helpTextList = None,
 |            timestampList = None,
 |            ownerList = None,
 |            lastChangedList = None,
 |            changeDiaryList = None,
 |            objPropListList = None
 |        :returns: AREscalationList or None in case of failure
 |
 |  ARParseXMLDocument(self, xmlInputDoc, objectsToParse=None)
 |      ARParseXMLDocument parses the contents of an XML document.
 |
 |      Input: xmlInputDoc (ARXMLInputDoc; contains either the xml string or a reference
 |                      to a file or a url)
 |        :returns: tuple of: (parsedStream (ARXMLParsedStream)
 |              parsedObjects (ARStructItemList)
 |              appBlockList (ARNameList))
 |              or None in case of failure
 |
 |  Logoff(self)
 |      Logoff ends the session with the Remedy server.
 |
 |      Input:
 |        :returns: errnr (or no output if no session was active)
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from pyars.ars.ARS60:
 |
 |  ARExportLicense(self)
 |      ARExportLicense exports license.
 |
 |      ARExportLicense specifies a pointer that is set to malloced
 |      space and contains the full contents of the license file currently
 |      on the server. This buffer can be written to a file to produce
 |      an exact replication of the license file, including all checksums
 |      and encryption.
 |      Input:
 |        :returns: exportBuf (or None in case of failure)
 |
 |  ARGetApplicationState(self, applicationName)
 |      ARGetApplicationState: retrieves the application state:
 |      maintenance (admin only), test, or production.
 |      Input: applicationName
 |        :returns: currentStateName (ARNameType) or None in case of failure
 |
 |  ARGetListActiveLink(self, schema=None, changedSince=0, objPropList=None)
 |      ARGetListActiveLink retrieves a list of active links for a schema/server.
 |
 |      You can retrieve all
 |      (accessible) active links or limit the list to active links associated with a
 |      particular form or modified after a specified time.
 |      Input: (optional) schema (default: None)
 |             (optional) changeSince (default: 0)
 |             (optional) objPropList (default: None)
 |        :returns: ARNameList or None in case of failure
 |
 |  ARGetListApplicationState(self)
 |      ARGetListApplicationState retrieves the list of application states
 |      (maintenance, test, or production) that an application on this server
 |      can assume. This list is server-dependent.
 |      Input:
 |        :returns: ARNameList or None in case of failure
 |
 |  ARGetListCharMenu(self, changedSince=0, formList=None, actLinkList=None, objPropList=None)
 |      ARGetListCharMenu retrieves a list of character menus.
 |
 |      Input: (ARTimestamp) changedSince (optional, default = 0)
 |             (ARNameList) formList (optional, default = None)
 |             (ARNameList) actLinkList (optional, default = None)
 |             (ARPropList) objPropList (optional, default = None)
 |        :returns: ARNameList or None in case of failure
 |
 |  ARGetListContainer(self, changedSince=0, containerTypes=None, attributes=1024, ownerObjList=None, objPropList=None)
 |      ARGetListContainer retrieves a list of containers.
 |
 |      You can retrieve all
 |      (accessible) containers or limit the list to containers of a particular type,
 |      containers owned by a specified form, or containers modified after a
 |      specified time.
 |      Input: (optional) changedSince (default: 0)
 |             (optional) containerTypes: ARContainerTypeList
 |             (optional) attributes (default: )
 |             (optional) ownerObjList (default: None)
 |             (optional) objPropList (Default: None)
 |        :returns: ARContainerInfoList or None in case of failure
 |      Please note: I'm not sure about the parameter configuration;
 |      I've implemented according to the C API documentation, but
 |      the exact usage of attributes & containerTypes is still
 |      a secret to me... Beware... has not been tested well!
 |
 |  ARGetListEntry(self, schema, query=None, getListFields=None, sortList=None, firstRetrieve=0, maxRetrieve=0, useLocale=False)
 |      ARGetListEntry retrieves a list of entries for a schema.
 |
 |      The AR System Server
 |      returns data from each entry as a string containing the concatenated values
 |      of selected fields. You can limit the list to entries that match particular
 |      conditions by specifying the qualifier parameter. ARGetListEntryWithFields
 |      also returns a qualified list of entries, but as field/value pairs.
 |      Input: schema/form name
 |             (optional) query (ARQualifierStruct)
 |             (optional) getListFields (default: None)
 |             (optional) sortList (default: None)
 |             (optional) firstRetrieve (default: AR_START_WITH_FIRST_ENTRY)
 |             (optional) maxRetrieve (default: AR_NO_MAX_LIST_RETRIEVE)
 |             (optional) useLocale (default: False)
 |        :returns: (AREntryListList, numMatches) or None in case of failure
 |
 |  ARGetListEntryWithFields(self, schema, query=None, getListFields=None, sortList=None, firstRetrieve=0, maxRetrieve=0, useLocale=False)
 |      ARGetListEntryWithFields retrieve a list of entries for a schema.
 |
 |      Data from each entry
 |      is returned as field/value pairs for all fields. You can limit the list to entries
 |      that match particular conditions by specifying the qualifier parameter.
 |      ARGetListEntry also returns a qualified list of entries, but as a string for each
 |      entry containing the concatenated values of selected fields.
 |      Note: It is important that the query looks something like this:
 |      'field' = "value" (please note the quotation marks).
 |      Input: schema/form name
 |             (optional) query string (default: None)
 |             (optional) getListFields (default: None)
 |             (optional) sortList (default: None)
 |             (optional) firstRetrieve (default: AR_START_WITH_FIRST_ENTRY)
 |             (optional) maxRetrieve (default: AR_NO_MAX_LIST_RETRIEVE)
 |             (optional) useLocale (default: False)
 |        :returns: (AREntryListFieldValueList, numMatches) or None in case of failure
 |
 |  ARGetListEscalation(self, schema=None, changedSince=0, objPropList=None)
 |      ARGetListEscalation retrieves a list of all escalations.
 |
 |      You can retrieve all
 |      escalations or limit the list to escalations associated with a particular form.
 |      The call returns all escalations modified on or after the timestamp.
 |      Input: (optional) schema (default: None)
 |             (optional) changedSince (default: 0)
 |             (optional) objPropList (default: None)
 |        :returns: ARAccessNameList or None in case of failure
 |
 |  ARGetListFilter(self, schema=None, changedSince=0, objPropList=None)
 |      ARGetListFilter return a list of all available filter for a schema.
 |
 |      You can retrieve all filters or
 |      limit the list to filters associated with a particular form or modified after a
 |      specified time.
 |      Input: (optional) schema (default: None -- retrieve all filter names)
 |             (optional) changedSince (default: 0)
 |             (optional) objPropList (default: None)
 |        :returns: ARNameList or None in case of failure
 |
 |  ARGetListRole(self, applicationName, userName=None, password=None)
 |      ARGetListRole retrieves a list of roles for a deployable application
 |      or returns a list of roles for a user for a deployable application.
 |
 |      Input: applicationName,
 |             (optional) userName (default = None)
 |             (optional) password (default = None)
 |        :returns: roleList (ARRoleInfoList) or None in case of failure
 |
 |  ARGetListSchema(self, changedSince=0, schemaType=1024, name='', fieldIdList=None, objPropList=None)
 |      ARGetListSchema return a list of all available schemas.
 |
 |      You can retrieve all (accessible) forms or limit the list to forms of a
 |      particular type or forms modified after a specified time.
 |      Input: (optional) changedSince (ARTimestamp, default: 0)
 |             (optional) schemaType (c_uint, default: AR_LIST_SCHEMA_ALL | AR_HIDDEN_INCREMENT)
 |             (optional) name (ARNameType, default "", only necessary if schemaType is
 |             AR_LIST_SCHEMA_UPLINK
 |             (optional) fieldIdList (ARInternalIdList, default: None) ARS then only returns the
 |             forms that contain all the fields in this list.
 |             (optional) objPropList (default: None)
 |        :returns: ARNameList or None in case of failure
 |
 |  ARGetListSchemaWithAlias(self, changedSince=0, schemaType=1024, name='', fieldIdList=None, vuiLabel=None, objPropList=None)
 |      ARGetListSchemaWithAlias retrieves a list of form definitions
 |      and their corresponding aliases.
 |
 |      You can retrieve all (accessible) forms or limit the list to
 |      forms of a particular type or forms modified after a specified time.
 |      Input: (optional) changedSince (ARTimestamp, default: 0)
 |             (optional) schemaType (c_uint, default: AR_LIST_SCHEMA_ALL | AR_HIDDEN_INCREMENT)
 |             (optional) name (ARNameType, default "", only necessary if schemaType is
 |             AR_LIST_SCHEMA_UPLINK
 |             (optional) fieldIdList (ARInternalIdList, default: None) ARS then only returns the
 |             forms that contain all the fields in this list.
 |             (optional) vuiLabel (default: None)
 |             (optional) objPropList (default: None)
 |        :returns: (nameList [ARNameList], aliasList[ARNameList]) or None in case of failure
 |
 |  ARGetMultipleEntryPoints(self, changedSince, appNameList, refTypeList, displayTag=None, vuiType=0, entryPointNameList=None, entryPointTypeList=None, entryPointDLabelList=None, ownerAppNameList=None, ownerAppDLabelList=None, groupListList=None, ownerObjListList=None, descriptionList=None, referencesList=None, helpTextList=None, timestampList=None, objPropListList=None)
 |      ARGetMultipleEntryPoints retrieves the entry points of multiple
 |      applications.
 |
 |      It returns the entry points that are accessible by
 |      the user, taking into account user permissions, licenses,
 |      and application states.
 |      Input: (ARTimeStamp) changedSince,
 |             (ARNameList) appNameList,
 |             (ARReferenceTypeList) refTypeList,
 |             (ARNameType) displayTag (optional, default = None)
 |             (c_uint) vuiType (optional, default = cars.AR_VUI_TYPE_NONE,
 |             (ARNameList) entryPointNameList (optional, default = None)
 |             (ARUnsignedIntList) entryPointTypeList (optional, default = None)
 |             (ARTextStringList) entryPointDLabelList (optional, default = None)
 |             (ARNameList) ownerAppNameList (optional, default = None)
 |             (ARTextStringList) ownerAppDLabelList (optional, default = None)
 |             (ARPermissionListList) groupListList (optional, default = None)
 |             (ARContainerOwnerObjListList) ownerObjListList (optional, default = None)
 |             (ARTextStringList) descriptionList (optional, default = None)
 |             (ARReferenceListList) referencesList (optional, default = None)
 |             (ARTextStringList) helpTextList (optional, default = None)
 |             (ARTimestampList) timestampList (optional, default = None)
 |             (ARPropListList) objPropListList (optional, default = None)
 |        :returns: a list of entryPointNameList, entryPointTypeList, entryPointDLabelList,
 |                  ownerAppNameList,ownerAppDLabelList, groupListList,
 |                   ownerObjListList, descriptionList, referencesList,
 |                   helpTextList, timestampList, objPropListList
 |               or None in case of failure
 |
 |  ARImportLicense(self, importBuf, importOption=0)
 |      ARImportLicense imports a license.
 |
 |      It imports a buffer, which is the contents of a license file, including checksums
 |      and encryption and an option, which tells whether to overwrite the existing
 |      license file or append to it.
 |      When called, the server validates that the buffer is a valid license file and
 |      either appends the licenses in the file to the existing license file or replaces the
 |      existing license file with the new file.
 |      Input:  importBuf,
 |              (optional) importOption (default = cars.AR_LICENSE_IMPORT_APPEND)
 |        :returns: errnr
 |
 |  ARSetApplicationState(self, applicationName, stateName)
 |      ARSetApplicationState sets the application state (maintenance, test, or production)
 |      in the AR System Application State form.
 |
 |      Input:  applicationName,
 |              stateName
 |        :returns: errnr
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from pyars.ars.ARS51:
 |
 |  ARCreateAlertEvent(self, user, alertText, priority=0, sourceTag='AR', serverName='@', formName=None, objectId=None)
 |      ARCreateAlertEvent enters an alert event.
 |
 |      ARCreateAlertEvent enters an alert event on the specified server.
 |      The AR System server sends an alert to the specified, registered users.
 |      Input: user (ARAccessNameType)
 |             alertText (c_char_p)
 |             (optional) priority (c_int, default = 0)
 |             (optional) sourceTag (ARNameType, default = AR)
 |             (optional) serverName (ARServerNameType, default = @)
 |             (optional) formName (ARNameType, default = None)
 |             (optional) objectId (c_char_p, default = None)
 |        :returns: entryId (AREntryIdType) or None in case of error
 |
 |  ARCreateEntry(self, schema, fieldList)
 |      ARCreateEntry creates a new entry.
 |
 |      ARCreateEntry creates a new entry in the indicated schema. You can create
 |      entries in base schemas only. To add entries to join forms, create them
 |      in one of the underlying base forms.
 |      Input: schema (ARNameType)
 |             fieldList (ARFieldValueList)
 |        :returns: entryId (AREntryIdType) (or none in case of error)
 |
 |  ARCreateLicense(self, licenseInfo)
 |      ARCreateLicense adds an entry to the license file for the current server.
 |
 |      Input: licenseInfo
 |        :returns: errnr
 |
 |  ARCreateSupportFile(self, fileType, name, id2, fileId, filePtr)
 |      ARCreateSupportFile creates a file.
 |
 |      ARCreateSupportFile creates a file that clients can retrieve by using the AR
 |      System. Such files are commonly used for reports (to store them separately
 |      from the active link that calls them, preventing large downloads of unneeded
 |      information), but this function can store any file on the server. Each support
 |      file is associated with a server object.
 |      Input: fileType,
 |              name,
 |              id2,
 |              fileId,
 |              filePtr
 |        :returns: errnr
 |
 |  ARDateToJulianDate(self, date)
 |      ARDateToJulianDate converts a year, month, and day value to a Julian date.
 |
 |      ARDateToJulianDate converts a year, month, and day value to a Julian date. The Julian
 |      date is the number of days since noon, Universal Time, on January 1, 4713
 |      BCE (on the Julian calendar). The changeover from the Julian calendar to the
 |      Gregorian calendar occurred in October, 1582. The Julian calendar is used
 |      for dates on or before October 4, 1582. The Gregorian calendar is used for
 |      dates on or after October 15, 1582.
 |      Input: date (a list of (year, month, day)
 |        :returns: jd or None in case of failure
 |
 |  ARDecodeARAssignStruct(self, assignText)
 |      ARDecodeARAssignStruct converts a serialized assign string in a .def file into an
 |      ARAssignStruct structure to facilitate string import.
 |
 |      Input: AassignText
 |        :returns: assignStruct (or None in case of failure)
 |
 |  ARDecodeARQualifierStruct(self, qualText)
 |      ARDecodeARQualifierStruct converts a serialized qualifier string into
 |      an ARQualifierStruct structure.
 |
 |      Input: qualText
 |        :returns: qualStruct (or None in case of failure)
 |
 |  ARDecodeAlertMessage(self, message, messageLen)
 |      ARDecodeAlertMessage decodes a formatted alert message and returns the
 |      component parts of the message to the alert client.
 |
 |      Input: message
 |             messageLen
 |        :returns: a list of (timestamp, sourceType, priority, alertText, sourceTag, serverName,
 |      serverAddr, formName, objectId)
 |
 |  ARDecodeDiary(self, diaryString)
 |      ARDecodeDiary parses any diary field.
 |
 |      ARDecodeDiary parses any diary field (including the changeDiary associated with every
 |      AR System object) into user, time stamp, and text components. The function
 |      takes the formatted string returned for all diary fields and decodes it into an
 |      array of diary entries.
 |
 |      Input: diaryString
 |        :returns: diaryList (or None in case of failure)
 |
 |  ARDecodeStatusHistory(self, statHistString)
 |      ARDecodeStatusHistory parses the Status History core field into user and
 |      time stamp components.
 |
 |      Input:  statHistString
 |        :returns: statHistList (or None in case of failure)
 |
 |  ARDeleteEntry(self, schema, entryIdList, option=0)
 |      ARDeleteEntry deletes the form entry.
 |      ARDeleteEntry deletes the form entry with the indicated ID from
 |      the specified server.
 |
 |      Input: schema
 |             entryIdList
 |             option
 |        :returns: errnr
 |
 |  ARDeleteField(self, schema, fieldId, deleteOption=0)
 |      ARDeleteField deletes the form field.
 |
 |      ARDeleteField deletes the form field with the indicated ID
 |      from the specified server.
 |      Input: schema
 |             fieldId
 |             deleteOption
 |        :returns: errnr
 |
 |  ARDeleteLicense(self, licenseType, licenseKey)
 |      ARDeleteLicense deletes an entry from the license file for the current server.
 |
 |      Input:
 |             licenseType
 |             licenseKey
 |        :returns: errnr
 |
 |  ARDeleteMultipleFields(self, schema, fieldList, deleteOption=0)
 |      ARDeleteMultipleFields deletes the form fields.
 |
 |      ARDeleteMultipleFields deletes the form fields with the indicated IDs from
 |      the specified server.
 |      Input:  schema
 |             fieldList
 |             deleteOption
 |        :returns: errnr
 |
 |  ARDeleteSupportFile(self, fileType, name, id2, fileId)
 |      ARDeleteSupportFile deletes a support file in the AR System.
 |
 |      Input: fileType,
 |             name
 |             id2 (if name is not a form, set id2 to 0.)
 |             fileId
 |        :returns: errnr
 |
 |  ARDeleteVUI(self, schema, vuiId)
 |      ARDeleteVUI deletes the form view (VUI).
 |
 |      ARDeleteVUI deletes the form view (VUI) with the indicated ID from the specified server.
 |      Input:
 |             schema
 |             vuiId
 |        :returns: errnr
 |
 |  ARDeregisterForAlerts(self, clientPort)
 |      ARDeregisterForAlerts cancels registration for the specified user.
 |
 |      ARDeregisterForAlerts cancels registration for the specified user on the
 |      specified AR System server and port.
 |      Input: clientPort
 |        :returns: errnr
 |
 |  AREncodeARAssignStruct(self, assignStruct)
 |      AREncodeARAssignStruct converts an ARAssignStruct structure into a serialized
 |      assignment string.
 |
 |      Input: assignStruct
 |        :returns: assignText (or None in case of failure)
 |
 |  AREncodeARQualifierStruct(self, qualStruct)
 |      AREncodeARQualifierStruct converts an ARQualifierStruct into a
 |      serialized qualification string.
 |
 |      Input:  qualStruct
 |        :returns: qualText (or None in case of failure)
 |
 |  AREncodeDiary(self, diaryList)
 |      AREncodeDiary converts an ARDiaryList into a diary string.
 |
 |      The resulting string is stored in a
 |      DEF file and is used for exporting definitions of ARServer objects.
 |      Input:  diaryList
 |        :returns: diaryString
 |
 |  AREncodeStatusHistory(self, statHistList)
 |      AREncodeStatusHistory converts an ARStatusHistoryList into a status
 |      history string.
 |
 |      The resulting string is stored in a DEF file and is used for exporting
 |      definitions of ARServer objects.
 |      Input: statHistList
 |        :returns: statHistString
 |
 |  ARExecuteProcess(self, command, runOption=0)
 |      ARExecuteProcess performs the indicated command on the specified server.
 |
 |      Depending on the
 |      values you specify for the returnStatus and returnString parameters, you can
 |      execute the command as an independent process or wait for the process to
 |      complete and return the result to the client. The system executes the
 |      command based on the access privileges of the user who launched the
 |      AR System server.
 |      Input: command
 |             (optional) runOption (if set to 0 (default), operate synchronously)
 |        :returns: synchron: (returnStatus, returnString)
 |             asynchron: (1, '')
 |             in case of an error: (errnr, None)
 |
 |  ARExpandCharMenu(self, menuIn)
 |      ARExpandCharMenu expands the references for the specified menu
 |      definition and returns a character menu with list-type items only.
 |
 |      Input:  (ARCharMenuStruct) menuIn
 |        :returns: ARCharMenuStruct (or None in case of failure)
 |
 |  ARFree(self, obj, freeStruct=False)
 |      ARFree frees all substructures of the handed structure.
 |
 |  ARGetAlertCount(self, qualifier=None)
 |      ARGetAlertCount retrieves the count of qualifying alert events .
 |      Input: (optional) qualifier (default: None)
 |        :returns: count (or None in case of failure)
 |
 |  ARGetCharMenu(self, name)
 |      ARGetCharMenu retrieves information about the character menu with
 |      the indicated name.
 |
 |      Input: name
 |        :returns: ARMenuStruct (containing: refreshCode, menuDefn, helpText,timestamp,owner,lastChanged,
 |      changeDiary,objPropList) or None in case of failure
 |
 |  ARGetContainerFromXML(self, parsedStream, containerName)
 |      ARGetContainerFromXML retrieves containers from an XML document.
 |
 |      Input: parsedStream,
 |          containerName
 |        :returns: (ARContainerStruct, arDocVersion) or None in case of failure
 |
 |  ARGetCurrencyRatio(self, currencyRatios, fromCurrencyCode, toCurrencyCode)
 |      ARGetCurrencyRatio retrieves a selected currency ratio from a set of ratios returned
 |      when the client program makes a call to GetMultipleCurrencyRatioSets.
 |      Input: currencyRatios
 |             fromCurrencyCode
 |             toCurrencyCode
 |        :returns: currencyRatio (or None in case of failure)
 |
 |  ARGetCurrentServer(self)
 |
 |  ARGetDSOMappingFromXML(self, parsedStream, mappingName)
 |      ARGetDSOMappingFromXML retrieves DSO mapping information from an
 |      XML document. For more information on DSO mapping, refer to the Distributed
 |      Server Option Administrator's Guide.
 |
 |      Input: parsedStream
 |           mappingName
 |        :returns: (fromSchema,
 |              fromServer,
 |              toSchema,
 |              toServer,
 |              enabled,
 |              updateCode,
 |              transferMode,
 |              mapType,
 |              rtnMapType,
 |              defaultMap,
 |              duplicateAction,
 |              patternMatch,
 |              requiredFields,
 |              retryTime,
 |              mapping,
 |              rtnMapping,
 |              matchQual,
 |              owner,
 |              lastModifiedBy,
 |              modifiedDate,
 |              helpText,
 |              changeHistory, arDocVersion) or None in case of failure
 |
 |  ARGetEntry(self, schemaString, entryId, idList=None)
 |      ARGetEntry retrieves the form entry with the indicated ID.
 |
 |      ARGetEntry retrieves the form entry with the indicated ID on
 |      the specified server.
 |      Input: schemaString: string
 |             entry: AREntryIdList
 |             (optional) idList: ARInternalIdList (default: None, retrieve no fields)
 |        :returns: ARFieldValueList (or None in case of failure)
 |
 |  ARGetEntryBLOB(self, schema, entryId, id_, loc)
 |      ARGetEntryBLOB retrieves the attachment, or binary large object (BLOB).
 |
 |      Retrieves the attachment, or binary large object (BLOB), stored for the
 |      attachment field with the indicated ID on the specified server. The BLOB can
 |      be placed in a buffer or a file.
 |      Input: schema: schema name
 |             entryId: AREntryIdList
 |             id_: fieldId
 |             loc: ARLocStruct
 |        :returns: (in loc) (or None in case of failure)
 |
 |  ARGetEntryStatistics(self, schema, qualifier=None, target=None, statistic=1, groupByList=None)
 |      ARGetEntryStatistics computes the indicated statistic for the form entries
 |      that match the conditions specified by the qualifier parameter.
 |
 |      Input: schema
 |             qualifier
 |             target
 |             statistic
 |             groupByList
 |        :returns: results (or None in case of failure)
 |
 |  ARGetEscalation(self, name)
 |      ARGetEscalation retrieves information about the escalation.
 |
 |      Input: name
 |        :returns: AREscalationStruct (or None in case of failure)
 |
 |  ARGetEscalationFromXML(self, parsedStream, escalationName)
 |      ARGetEscalationFromXML retrieves escalations from an XML document.
 |
 |      Input: parsedStream, escalationName
 |        :returns: (AREscalationStruct, arDocVersion) or None in case of failure
 |
 |  ARGetFullTextInfo(self, requestList)
 |      Retrieves the requested full text search (FTS) information.
 |
 |      Note: Full text search (FTS) is documented for backward compatibility only,
 |      and is not supported in AR System 6.3.
 |      Input: requestList: ARFullTextInfoRequestList
 |        :returns: fullTextInfo (or None in case of failure)
 |
 |  ARGetListAlertUser(self)
 |      ARGetListAlertUser retrieves a list of all users that are registered for alerts.
 |
 |      Input:
 |        :returns: ARAccessNameList (or None in case of failure)
 |
 |  ARGetListExtSchemaCandidates(self, schemaType=1031)
 |      ARGetListExtSchemaCandidates retrieves a list of all available external data
 |      source tables (schema candidates).
 |
 |      Users choose fields from these candidates to populate the
 |      vendor form.
 |      Input: schemaType
 |        :returns: ARCompoundSchemaList (or None in case of failure)
 |
 |  ARGetListGroup(self, userName=None, password=None)
 |      ARGetListGroup retrieves a list of access control groups.
 |
 |      You can retrieve all groups or limit the list to groups associated with a particular user.
 |      Input: (optional) userName
 |             (optional) password
 |        :returns: ARGroupInfoList (or None in case of failure)
 |
 |  ARGetListLicense(self, licenseType=None)
 |      ARGetListLicense return a list of entries from the license file.
 |
 |      The list contains license information for all the types of licenses, including DSO,
 |      flashboards, SMU applications, and servers.
 |      Input: (optional) licenseType (ARLicenseNameType, default: None)
 |        :returns: ARLicenseInfoList (or None in case of failure)
 |
 |  ARGetListSQL(self, sqlCommand, maxRetrieve=0)
 |      ARGetListSQL retrieves a list of rows from the underlying
 |      SQL database on the specified server.
 |
 |      The server executes the SQL command you specify and returns the
 |      matching rows. A list with zero items and a warning message are returned if
 |      no SQL database resides on the server. The system returns information based
 |      on the access privileges of the user who launched the AR System server.
 |      Input: sqlCommand
 |             (optional) maxRetrieve (default: cars.AR_NO_MAX_LIST_RETRIEVE)
 |        :returns: a tuple of (valueListList, numMatches) or None in case of failure
 |
 |  ARGetListServer(self)
 |      ARGetListServer retrieve the list of available AR System servers.
 |
 |      Retrieves the list of available AR System servers defined in the ar directory file
 |      (UNIX only). Remedy User, Remedy Administrator, Remedy Alert, and
 |      Remedy Import connect to these servers automatically if no servers are
 |      specified at startup. If the ar file is under NIS control, the system uses the file
 |      specified by the NIS map instead of the local ar file. For information about
 |      the ar file, see the Configuring AR System guide.
 |      Note: In the Windows API, server information is retrieved from the registry
 |      instead of the ar file. API programs that run on the server (for example,
 |      through a filter or escalation) can use this function to retrieve the name of
 |      that local server only. Programs that run on a Windows client, however,
 |      cannot. In this case, the function always returns a list of zero servers.
 |      Input:
 |        :returns: ARServerNameList (or None in case of failure)
 |
 |  ARGetListSupportFile(self, fileType, name, id2=0, changedSince=0)
 |      ARGetListSupportFile retrieves a list of support file IDs for a
 |      specified type of object.
 |
 |      Input: fileType
 |             name
 |             (optional) id2
 |             (optional) changedSince
 |        :returns: fileIdList (or None in case of failure)
 |
 |  ARGetListUser(self, userListType=2, changedSince=0)
 |      ARGetListUser retrieves a list of users.
 |
 |      You can retrieve information about the
 |      current user, all registered users, or all users currently accessing the server.
 |      Input: userListType (default: AR_USER_LIST_CURRENT)
 |             changedSince (default: 0)
 |        :returns: ARUserInfoList (or None in case of failure)
 |
 |  ARGetListXMLObjects(self, xmlInputDoc)
 |      ARGetListXMLObjects retrieves object names and types from an XML document.
 |
 |      Input: xmlInputDoc (ARXMLInputDoc)
 |        :returns: (objectTypeList (ARUnsignedIntList), objectNameList (ARNameList),
 |              subTypeList (ARUnsignedIntList), appBlockNameList (ARNameList))
 |      or None in case of failure
 |
 |  ARGetLocalizedValue(self, localizedRequest)
 |      ARGetLocalizedValue retrieves a localized text string from the Remedy
 |      Message Catalog.
 |
 |      The message that the server retrieves depends on the user locale.
 |      Input:  localizedRequest
 |        :returns: a tuple of (localizedValue, timestamp) or None in case of failure
 |
 |  ARGetMenuFromXML(self, parsedStream, menuName)
 |      ARGetMenuFromXML retrieves menus from an XML document.
 |
 |      Input: parsedStream
 |             menuName
 |        :returns: (ARMenuStruct, arDocVersion)
 |              or None in case of failure
 |
 |  ARGetMultipleCurrencyRatioSets(self, ratioTimestamps=None)
 |      ARGetMultipleCurrencyRatioSets retrieves a list of formatted currency ratio sets
 |      valid for the times specified in the ratioTimestamps argument.
 |
 |      You can use ARGetCurrencyRatio to extract a specific currency ratio from a
 |      ratio set that this call (ARGetMultipleCurrencyRatioSets) returns.
 |      Input: (ARTimestampList) ratioTimestamps (optional, default = None)
 |        :returns: (ARTextStringList) currencyRatioSets (or None in case of failure)
 |
 |  ARGetMultipleEntries(self, schema, entryIdList, idList=None)
 |      ARGetMultipleEntries retrieve a list of entries.
 |
 |      ARGetMultipleEntries retrieve a list of entries/objects for a
 |      specific schema according to an array of specific ids together
 |      with their fields and values.
 |      NOTE: A maximum of 100 entries can be returned by this function. If you need to return
 |      more than 100 entries, call this function multiple times.
 |      Input: (ARNameType) schema
 |             (AREntryIdListList) entryIdList: entry ids to be retrieved
 |             (ARInternalIdList) idList field ids to be retrieved(optional, default = None)
 |        :returns: (ARBooleanList, ARFieldValueListList) (or None in case of failure)
 |
 |  ARGetMultipleExtFieldCandidates(self, schema)
 |      ARGetMultipleExtFieldCandidates Retrieves a list of all available
 |      external data source fields (field candidates).
 |
 |      Users choose the data from one of these field candidates to populate the
 |      vendor form.
 |      Input:  schema (ARCompoundSchema)
 |        :returns: a tuple of (fieldMapping, limit, dataType) (or None in case of failure)
 |
 |  ARGetMultipleLocalizedValues(self, localizedRequestList)
 |      ARGetMultipleLocalizedValues Retrieves multiple localized text
 |      strings from the Remedy Message Catalog.
 |
 |      The messages that the server retrieves depend on the user locale in the control
 |      structure. This function performs the same action as ARGetLocalizedValues
 |      but is easier to use and more efficient than retrieving multiple values one by
 |      one.
 |      Input:  (ARLocalizedRequestList) localizedRequestList
 |        :returns: tuple of (localizedValueList, timestampList)
 |              or None in case of failure
 |
 |  ARGetServerInfo(self, requestList)
 |      ARGetServerInfo retrieves the requested configuration information.
 |
 |      Input:  ARServerInfoRequestList
 |        :returns: ARServerInfoList (or None in case of failure)
 |
 |  ARGetServerStatistics(self, requestList)
 |      ARGetServerStatistics returns the requested statistics.
 |
 |      The counts returned
 |      generally represent the number of occurrences since starting the server. If a
 |      statistic reaches the maximum value for a long integer, the system resets the
 |      counter and begins incrementing again.
 |      Input: ARServerInfoRequestList
 |        :returns: ARServerInfoList (or None in case of failure)
 |
 |  ARGetSessionConfiguration(self, variableId)
 |      ARGetSessionConfiguration retrieves a public API session variable.
 |
 |      Input:  variableId
 |        :returns: ARValueStruct (or None in case of failure)
 |
 |  ARGetSupportFile(self, fileType, name, id2, fileId, filePtr)
 |      ARGetSupportFile retrieves a file supporting external reports.
 |
 |      Input:  fileType,
 |               name,
 |               id2,
 |               fileId,
 |               filePtr
 |        :returns: timestamp (or None in case of failure)
 |
 |  ARGetTextForErrorMessage(self, msgId)
 |      ARGetTextForErrorMessage Retrieves the message text for the
 |      specified error from the local catalog
 |
 |      The length of the text is limited by AR_MAX_MESSAGE_SIZE
 |      (255 bytes).
 |      Input:  msgId
 |        :returns: String with the (localized) error message (or None in case
 |              of failure)
 |
 |  ARGetVUIFromXML(self, parsedStream, schemaName)
 |      ARGetVUIFromXML retrieves views from an XML document.
 |
 |      Input: parsedStream
 |              schemaName
 |        :returns: (vuiInfoList, fieldInfoList, modifiedDate, arDocVersion)
 |              or None in case of failure
 |
 |  ARInitialization(self)
 |      ARInitialization performs server- and network-specific
 |      initialization operations for each Action Request
 |      System session.
 |
 |      Input:
 |        :returns: errnr
 |
 |  ARJulianDateToDate(self, jd)
 |      ARJulianDateToDate converts a Julian date to a year, month, and day value.
 |
 |      The Julian date is the
 |      number of days since noon, Universal Time, on January 1, 4713 BCE (on the
 |      Julian calendar). The changeover from the Julian calendar to the Gregorian
 |      calendar occurred in October, 1582. The Julian calendar is used for dates on
 |      or before October 4, 1582. The Gregorian calendar is used for dates on or
 |      after October 15, 1582.
 |      Input:  integer
 |        :returns: ARDateStruct (or None in case of failure)
 |
 |  ARLoadARQualifierStruct(self, schema, qualString, displayTag=None)
 |      ARLoadARQualifierStruct loads the specified qualification string.
 |
 |      Loads the specified qualification string ARQualifierStruct structure. This function
 |      qualifications in the required format.
 |      Input:  schema
 |              qualString: containing the qualification to load (following the syntax
 |                              rules for entering qualifications in the AR System Windows
 |                              User Tool query bar).
 |              displayTag: name of the form view (VUI) to use for resolving field names.
 |        :returns: ARQualifierStruct (or None in case of failure)
 |
 |  ARMergeEntry(self, schema, fieldList, mergeType=1)
 |      ARMergeEntry merges an existing database entry into the indicated form.
 |
 |      You can merge entries into base forms only. To add entries to join
 |      forms, merge them into one of the underlying base forms.
 |      Input:  (ARNameType) schema,
 |              (ARFieldValueList) fieldList
 |              (c_uint) mergeType (optional, default: AR_MERGE_ENTRY_DUP_ERROR)
 |        :returns: entryId (or None in case of failure)
 |
 |  ARRegisterForAlerts(self, clientPort, registrationFlags=0)
 |      ARRegisterForAlerts registers the specified user with the AR System
 |      server to receive alerts.
 |
 |      Input:  (c_int) clientPort
 |              (c_uint) registrationFlags (optional; reserved for future use and should be set to zero.)
 |        :returns: errnr
 |
 |  ARSetContainerToXML(self, containerName, xmlDocHdrFtrFlag=False, permissionList=None, subAdminGrpList=None, ownerObjectList=None, label='', description='', containerType=1, referenceList=None, owner='', lastModifiedBy='', modifiedDate=0, helpText=None, changeHistory=None, objPropList=None, arDocVersion=c_ulong(0L))
 |      ARSetContainerToXML converts containers to XML.
 |
 |      Input:
 |        :returns: string containing the XML
 |              or None in case of failure
 |
 |  ARSetDSOMappingToXML(self, mappingName, xmlDocHdrFtrFlag)
 |      ARSetDSOMappingToXML retrieves information about the DSO mapping.
 |
 |      Input:
 |        :returns: string containing the XML
 |              or None in case of failure
 |
 |  ARSetDocFooterToXML(self)
 |      ARSetDocFooterToXML converts document headers to XML.
 |
 |      Input:
 |        :returns: string containing the XML (or None in case of failure)
 |
 |  ARSetDocHeaderToXML(self)
 |      ARSetDocHeaderToXML converts document headers to XML.
 |
 |      Input:
 |        :returns: string containing the XML (or None in case of failure)
 |
 |  ARSetEntry(self, schema, entryIdList, fieldList, getTime=0, option=None)
 |      ARSetEntry updates the form entry with the indicated ID on the
 |      specified server.
 |
 |      Input:  schema
 |              entryId: AREntryIdList
 |              fieldList: ARFieldValueList
 |              (optional) getTime (the server compares this value with the
 |                          value in the Modified Date core field to
 |                          determine whether the entry has been changed
 |                          since the last retrieval.)
 |              (optional) option (for join forms only; can be AR_JOIN_SETOPTION_NONE
 |                          or AR_JOIN_SETOPTION_REF)
 |        :returns: errnr
 |
 |  ARSetEscalationToXML(self, escalationName, xmlDocHdrFtrFlag=0, escalationTime=None, workflowConnect=None, enabled=0, query=None, ifActionList=None, elseActionList=None, owner='', lastModifiedBy='', modifiedDate=0, helpText=None, changeHistory=None, objPropList=None, arDocVersion=c_ulong(0L))
 |      ARSetEscalationToXML converts escalations to XML.
 |
 |      Input:
 |        :returns: string containing the XML
 |              or None in case of failure
 |
 |  ARSetFilterToXML(self, filterName, xmlDocHdrFtrFlag=0, executionOrder=None, workflowConnect=None, executeOn=None, enabled=None, query=None, ifActionList=None, elseActionList=None, owner='', lastModifiedBy='', modifiedDate=0, helpText=None, changeHistory=None, objPropList=None, arDocVersion=c_ulong(0L))
 |      ARSetEscalationToXML converts a filter to XML.
 |
 |      Input:
 |        :returns: string containing the XML
 |              or None in case of failure
 |
 |  ARSetFullTextInfo(self, fullTextInfo)
 |      ARSetFullTextInfo updates the indicated FTS information
 |
 |      Note: Full text search (FTS) is documented for backward compatibility only,
 |      and is not supported in AR System 6.3.
 |      Input:  fullTextInfo
 |        :returns: errnr
 |
 |  ARSetLogging(self, logTypeMask=0, whereToWriteMask=2, file_=None)
 |      ARSetLogging activates and deactivates client-side logging of server activity.
 |
 |      Input:  (optional) logTypeMask:  what to log (default: nothing)
 |              (optional) whereToWriteMask: to log file or (default) status list
 |              (optional) file_: FileHandle (default: None)
 |        :returns: errnr
 |
 |  ARSetMenuToXML(self, menuName, xmlDocHdrFtrFlag=0, refreshCode=0, menuDefn=None, owner='', lastModifiedBy='', modifiedDate=0, helpText=None, changeHistory=None, objPropList=None, arDocVersion=c_ulong(0L))
 |      ARSetMenuToXML converts menus to XML.
 |
 |      Input:
 |        :returns: string containing the XML
 |              or None in case of failure
 |
 |  ARSetServerInfo(self, serverInfo)
 |      ARSetServerInfo updates the indicated configuration information.
 |
 |      Input:  serverInfo (ARServerInfoList)
 |        :returns: errnr
 |
 |  ARSetServerPort(self, server, port=0, rpcProgNum=0)
 |      ARSetServerPort specifies the port.
 |
 |      ARSetServerPort specifies the port that your program will use to communicate with the
 |      AR System server and whether to use a private server.
 |
 |      Input:  server
 |              (optional) port
 |              (optional) rpcProgNum
 |        :returns: errnr
 |
 |  ARSetSessionConfiguration(self, variableId, variableValue)
 |      ARSetSessionConfiguration sets an API session variable.
 |
 |      Input:  variableId (c_uint),
 |              variableValue (ARValueStruct)
 |        :returns: errnr
 |
 |  ARSetSupportFile(self, fileType, name, id2, fileId, filePtr)
 |      ARSetSupportFile sets a support file in the AR System.
 |
 |      Input:  fileType,
 |              name,
 |              id2,
 |              fileId,
 |              filePtr
 |        :returns: errnr
 |
 |  ARSetVUIToXML(self, schemaName, xmlDocHdrFtrFlag=False, vuiInfoList=None, fieldInfoList=None, modifiedDate=0, arDocVersion=0)
 |      ARSetVUIToXML converts a view to an XML document.
 |      Input: schemaName
 |            (optional) xmlDocHdrFtrFlag (ARBoolean, default: False)
 |            (optional) schemaName (ARNameType, default: None),
 |            (optional) vuiInfoList (ARVuiInfoList, default: None),
 |            (optional) fieldInfoList (ARFieldInfoList, default: None),
 |            (optional) modifiedDate (ARTimestamp, default: 0),
 |            (optional) arDocVersion (unsigned int, default: 0)
 |        :returns: string containing the XML (or None in case of failure)
 |
 |  ARSignal(self, signalList)
 |      ARSignal causes the server to reload information.
 |
 |      Input:  (ARSignalList) signalList
 |        :returns: errnr
 |
 |  ARTermination(self)
 |      ARTermination disconnects from the server.
 |
 |      Performs environment-specific cleanup routines and disconnects from the
 |      specified AR System session. All API programs that interact with the
 |      AR System should call this function upon completing work in a given
 |      session. Calling this function is especially important in environments that
 |      use floating licenses. If you do not disconnect from the server, your license
 |      token is unavailable for other users for the defined time-out interval.
 |      Input:
 |        :returns: errnr
 |
 |  ARValidateFormCache(self, form, mostRecentActLink=0, mostRecentMenu=0, mostRecentGuide=0)
 |      ARValidateFormCache retrieves key information from a cached definition.
 |
 |      Retrieves key information from a cached definition (such as form name,
 |      form change time, active link change time, active link guide change time, and
 |      menu change time) and returns information about any changes to the
 |      definition given this information. This function call also returns information
 |      about updates to the current user performing a test. This information causes
 |      the cache to reload to insure accurate definitions.
 |      This call is intended to allow Remedy User to gather all the data that is needed
 |      to validate its local cache for a form in a single call.
 |      Input:  form
 |              (ARTimestamp) mostRecentActLink (optional, default = 0)
 |              (ARTimestamp) mostRecentMenu (optional, default = 0)
 |              (ARTimestamp) mostRecentGuide (optional, default = 0)
 |        :returns: tuple of (formLastModified, numActLinkOnForm, numActLinkSince, menuSinceList
 |                  groupsLastChanged, userLastChanged, guideSinceList)
 |                  or None in case of failure
 |
 |  ARValidateLicense(self, licenseType)
 |      ARValidateLicense confirms whether the current server holds a
 |      valid license of the specified type.
 |
 |      Input:  (ARLicenseNameType) licenseType
 |        :returns: ARLicenseValidStruct (or None in case of failure)
 |
 |  ARValidateMultipleLicenses(self, licenseTypeList)
 |      ARValidateMultipleLicenses checks whether the current server holds a license for several specified license
 |      types. This function performs the same action as ARValidateLicense, but it is easier
 |      to use and more efficient than validating licenses one by one.
 |
 |      Input:  (ARLicenseNameList) licenseTypeList
 |        :returns: ARLicenseValidList or None in case of failure
 |
 |  ARVerifyUser(self)
 |      ARVerifyUser checks the cache on the specified server
 |      to determine whether the specified user is registered
 |      with the current server.
 |
 |      Input:
 |        :returns: tuple of (adminFlag, subAdminFlag, customFlag)
 |              or None in case of failure
 |
 |  FreeARActiveLinkList(self, obj)
 |      FreeARActiveLinkStruct frees all elements of ARActiveLinkList.
 |
 |  FreeARActiveLinkStruct(self, obj)
 |      FreeARActiveLinkStruct frees all substructures of ARActiveLinkStruct.
 |
 |  FreeARContainerList(self, obj)
 |
 |  FreeARContainerStruct(self, obj)
 |
 |  FreeAREscalationList(self, obj)
 |      FreeAREscalationList frees all elements of AREscalationList.
 |
 |  FreeAREscalationStruct(self, obj)
 |      FreeAREscalationStruct frees all substructures of AREscalationStruct.
 |
 |  FreeARFilterList(self, obj)
 |      FreeARFilterList frees all elements of ARFilterList.
 |
 |  FreeARFilterStruct(self, obj)
 |      FreeARFilterStruct frees all substructures of ARFilterStruct.
 |
 |  FreeARMenuList(self, obj)
 |      FreeARMenuList frees all elements of ARMenuList.
 |
 |  FreeARMenuStruct(self, obj)
 |      FreeARMenuStruct frees all substructures of ARMenuStruct.
 |
 |  FreeARSchema(self, obj)
 |      FreeARSchema frees all substructures of ARSchema.
 |
 |  FreeARSchemaList(self, obj)
 |      FreeARSchemaList frees all elements of ARSchemaList.
 |
 |  padEntryid(self, entryId, prefix='', length=15)
 |      padEntryid fills an id with leading zeroes.
 |
 |      padEntryid pads entry id string with leading zeros. Accepts optional
 |      prefix. Illegal prefixes are cheerfully ignored. Default length
 |      of 15 can be shortened. Script will fill the string as necessary with
 |      ' ' until it reaches length+1 so that assignment to
 |      a fieldId works without problems, using ctypes.
 |      Input: string entryId
 |             string prefix
 |             int length
 |        :returns: string
 |
 |  schemaExists(self, schemaString)
 |      schemaExists decides if a schema exists on the server.
 |
 |      Input: string (name of a schema)
 |        :returns: Boolean or None in case of failure
 |
 |  statusText(self)
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pyars.ars.ARS51:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)
